#ifndef __OV5640_H__
#define __OV5640_H__

#define REG_END              0xffff
#define REG_MDELAY           0xfffe

#define MODEL_ID_HI	0x300a
#define MODEL_ID_LO	0x300b
#define REVISION_NUMBER	0x302a
#define SYS_CTRL0		0x3008

struct regval {
	u16	reg;
	u8	value;
};

static struct regval init_regs[] = {
	//15fps VGA YUV output
	// 24MHz input clock, 24MHz PCLK
	{ 0x3103, 0x11 }, // system clock from pad, bit[1]
	{ 0x3008, 0x82 }, // software reset, bit[7]
	// delay 5ms
	{ REG_MDELAY, 0x05 },
	{ 0x3008, 0x42 }, // software power down, bit[6]
	{ 0x3008, 0x02 }, // wake up from standby, bit[6]
	{ 0x3008, 0x42 }, // wake up from standby, bit[6]
	{ 0x3103, 0x03 }, // system clock from PLL, bit[1]
	{ 0x3017, 0xff }, // FREX, Vsync, HREF, PCLK, D[9:6] output enable
//	{ 0x3018, 0xff }, // D[5:0], GPIO[1:0] output enable
	{ 0x3018, 0xf3 }, // D[5:2], GPIO[1:0] output enable, D[1:0] disable
	{ 0x3034, 0x1a }, // MIPI 10-bit
	{ 0x3037, 0x13 }, // PLL root divider, bit[4], PLL pre-divider, bit[3:0]
	{ 0x3108, 0x01 }, // PCLK root divider, bit[5:4], SCLK2x root divider,

	// SCLK root divider, bit[1:0]
	{ 0x3630, 0x36 },
	{ 0x3631, 0x0e },
	{ 0x3632, 0xe2 },
	{ 0x3633, 0x12 },
	{ 0x3621, 0xe0 },
	{ 0x3704, 0xa0 },
	{ 0x3703, 0x5a },
	{ 0x3715, 0x78 },
	{ 0x3717, 0x01 },
	{ 0x370b, 0x60 },
	{ 0x3705, 0x1a },
	{ 0x3905, 0x02 },
	{ 0x3906, 0x10 },
	{ 0x3901, 0x0a },
	{ 0x3731, 0x12 },
	{ 0x3600, 0x08 }, // VCM control
	{ 0x3601, 0x33 }, // VCM control
	{ 0x302d, 0x60 }, // system control
	{ 0x3620, 0x52 },
	{ 0x371b, 0x20 },
	{ 0x471c, 0x50 },
	{ 0x3a13, 0x43 }, // pre-gain = 1.047x
	{ 0x3a18, 0x00 }, // gain ceiling
	{ 0x3a19, 0xf8 }, // gain ceiling = 15.5x
	{ 0x3635, 0x13 },
	{ 0x3636, 0x03 },
	{ 0x3634, 0x40 },
	{ 0x3622, 0x01 },

	// 50/60Hz detection
	{ 0x3c01, 0x34 }, // Band auto, bit[7]
	{ 0x3c04, 0x28 }, // threshold low sum
	{ 0x3c05, 0x98 }, // threshold high sum
	{ 0x3c06, 0x00 }, // light meter 1 threshold[15:8]
	{ 0x3c07, 0x08 }, // light meter 1 threshold[7:0]
	{ 0x3c08, 0x00 }, // light meter 2 threshold[15:8]
	{ 0x3c09, 0x1c }, // light meter 2 threshold[7:0]
	{ 0x3c0a, 0x9c }, // sample number[15:8]
	{ 0x3c0b, 0x40 }, // sample number[7:0]
	{ 0x3810, 0x00 }, // Timing Hoffset[11:8]
	{ 0x3811, 0x10 }, // Timing Hoffset[7:0]
	{ 0x3812, 0x00 }, // Timing Voffset[10:8]
	{ 0x3708, 0x64 },
	{ 0x4001, 0x02 }, // BLC start from line 2
	{ 0x4005, 0x1a }, // BLC always update
	{ 0x3000, 0x00 }, // enable blocks
	{ 0x3004, 0xff }, // enable clocks
	{ 0x300e, 0x58 }, // MIPI power down, DVP enable
	{ 0x302e, 0x00 },
	{ 0x4300, 0x30 }, // YUV 422, YUYV
	{ 0x501f, 0x00 }, // YUV 422
	{ 0x440e, 0x00 },
	{ 0x5000, 0xa7 }, // Lenc on, raw gamma on, BPC on, WPC on, CIP on
	// AEC target
	{ 0x3a0f, 0x30 }, // stable range in high
	{ 0x3a10, 0x28 }, // stable range in low
	{ 0x3a1b, 0x30 }, // stable range out high
	{ 0x3a1e, 0x26 }, // stable range out low
	{ 0x3a11, 0x60 }, // fast zone high
	{ 0x3a1f, 0x14 }, // fast zone low
	// Lens correction for
	{ 0x5800, 0x23 },
	{ 0x5801, 0x14 },
	{ 0x5802, 0x0f },
	{ 0x5803, 0x0f },
	{ 0x5804, 0x12 },
	{ 0x5805, 0x26 },
	{ 0x5806, 0x0c },
	{ 0x5807, 0x08 },
	{ 0x5808, 0x05 },
	{ 0x5809, 0x05 },
	{ 0x580a, 0x08 },
	{ 0x580b, 0x0d },
	{ 0x580c, 0x08 },
	{ 0x580d, 0x03 },
	{ 0x580e, 0x00 },
	{ 0x580f, 0x00 },
	{ 0x5810, 0x03 },
	{ 0x5811, 0x09 },
	{ 0x5812, 0x07 },
	{ 0x5813, 0x03 },
	{ 0x5814, 0x00 },
	{ 0x5815, 0x01 },
	{ 0x5816, 0x03 },
	{ 0x5817, 0x08 },
	{ 0x5818, 0x0d },
	{ 0x5819, 0x08 },
	{ 0x581a, 0x05 },
	{ 0x581b, 0x06 },
	{ 0x581c, 0x08 },
	{ 0x581d, 0x0e },
	{ 0x581e, 0x29 },
	{ 0x581f, 0x17 },
	{ 0x5820, 0x11 },
	{ 0x5821, 0x11 },
	{ 0x5822, 0x15 },
	{ 0x5823, 0x28 },
	{ 0x5824, 0x46 },
	{ 0x5825, 0x26 },
	{ 0x5826, 0x08 },
	{ 0x5827, 0x26 },
	{ 0x5828, 0x64 },
	{ 0x5829, 0x26 },
	{ 0x582a, 0x24 },
	{ 0x582b, 0x22 },
	{ 0x582c, 0x24 },
	{ 0x582d, 0x24 },
	{ 0x582e, 0x06 },
	{ 0x582f, 0x22 },
	{ 0x5830, 0x40 },
	{ 0x5831, 0x42 },
	{ 0x5832, 0x24 },
	{ 0x5833, 0x26 },
	{ 0x5834, 0x24 },
	{ 0x5835, 0x22 },
	{ 0x5836, 0x22 },
	{ 0x5837, 0x26 },
	{ 0x5838, 0x44 },
	{ 0x5839, 0x24 },
	{ 0x583a, 0x26 },
	{ 0x583b, 0x28 },
	{ 0x583c, 0x42 },
	{ 0x583d, 0xce }, // lenc BR offset
	// AWB
	{ 0x5180, 0xff }, // AWB B block
	{ 0x5181, 0xf2 }, // AWB control
	{ 0x5182, 0x00 }, // [7:4] max local counter, [3:0] max fast counter
	{ 0x5183, 0x14 }, // AWB advanced
	{ 0x5184, 0x25 },
	{ 0x5185, 0x24 },
	{ 0x5186, 0x09 },
	{ 0x5187, 0x09 },
	{ 0x5188, 0x09 },
	{ 0x5189, 0x75 },
	{ 0x518a, 0x54 },
	{ 0x518b, 0xe0 },
	{ 0x518c, 0xb2 },
	{ 0x518d, 0x42 },
	{ 0x518e, 0x3d },
	{ 0x518f, 0x56 },
	{ 0x5190, 0x46 },
	{ 0x5191, 0xf8 }, // AWB top limit
	{ 0x5192, 0x04 }, // AWB bottom limit
	{ 0x5193, 0x70 }, // red limit
	{ 0x5194, 0xf0 }, // green limit
	{ 0x5195, 0xf0 }, // blue limit
	{ 0x5196, 0x03 }, // AWB control
	{ 0x5197, 0x01 }, // local limit
	{ 0x5198, 0x04 },
	{ 0x5199, 0x12 },
	{ 0x519a, 0x04 },
	{ 0x519b, 0x00 },
	{ 0x519c, 0x06 },
	{ 0x519d, 0x82 },
	{ 0x519e, 0x38 }, // AWB control
	// Gamma
	{ 0x5480, 0x01 }, // Gamma bias plus on, bit[0]
	{ 0x5481, 0x08 },
	{ 0x5482, 0x14 },
	{ 0x5483, 0x28 },
	{ 0x5484, 0x51 },
	{ 0x5485, 0x65 },
	{ 0x5486, 0x71 },
	{ 0x5487, 0x7d },
	{ 0x5488, 0x87 },
	{ 0x5489, 0x91 },
	{ 0x548a, 0x9a },
	{ 0x548b, 0xaa },
	{ 0x548c, 0xb8 },
	{ 0x548d, 0xcd },
	{ 0x548e, 0xdd },
	{ 0x548f, 0xea },
	{ 0x5490, 0x1d },
	// color matrix
	{ 0x5381, 0x1e }, // CMX1 for Y
	{ 0x5382, 0x5b }, // CMX2 for Y
	{ 0x5383, 0x08 }, // CMX3 for Y
	{ 0x5384, 0x0a }, // CMX4 for U
	{ 0x5385, 0x7e }, // CMX5 for U
	{ 0x5386, 0x88 }, // CMX6 for U
	{ 0x5387, 0x7c }, // CMX7 for V
	{ 0x5388, 0x6c }, // CMX8 for V
	{ 0x5389, 0x10 }, // CMX9 for V
	{ 0x538a, 0x01 }, // sign[9]
	{ 0x538b, 0x98 }, // sign[8:1]
	// UV adjsut
	{ 0x5580, 0x06 }, // saturation on, bit[1]
	{ 0x5583, 0x40 },
	{ 0x5584, 0x10 },
	{ 0x5589, 0x10 },
	{ 0x558a, 0x00 },
	{ 0x558b, 0xf8 },
	{ 0x501d, 0x40 }, // enable manual offset of contrast
	// CIP
	{ 0x5300, 0x08 }, // CIP sharpen MT threshold 1
	{ 0x5301, 0x30 }, // CIP sharpen MT threshold 2
	{ 0x5302, 0x10 }, // CIP sharpen MT offset 1
	{ 0x5303, 0x00 }, // CIP sharpen MT offset 2
	{ 0x5304, 0x08 }, // CIP DNS threshold 1
	{ 0x5305, 0x30 }, // CIP DNS threshold 2
	{ 0x5306, 0x08 }, // CIP DNS offset 1
	{ 0x5307, 0x16 }, // CIP DNS offset 2
	{ 0x5309, 0x08 }, // CIP sharpen TH threshold 1
	{ 0x530a, 0x30 }, // CIP sharpen TH threshold 2
	{ 0x530b, 0x04 }, // CIP sharpen TH offset 1
	{ 0x530c, 0x06 }, // CIP sharpen TH offset 2
	{ 0x5025, 0x00 },
	{ 0x3008, 0x02 }, // wake up from standby, bit[6]

	{ 0x4202, 0x0f },
	{ 0x302c, 0x42 }, //bit[7,6] output drive capability.

	{ REG_END, 0x00 },
};

static u8 afc_firmware[] = {
	0x02, 0x0f, 0xd6, 0x02, 0x0a, 0x39, 0xc2, 0x01, 0x22, 0x22,
	0x00, 0x02, 0x0f, 0xb2, 0xe5, 0x1f, 0x70, 0x72, 0xf5, 0x1e,
	0xd2, 0x35, 0xff, 0xef, 0x25, 0xe0, 0x24, 0x4e, 0xf8, 0xe4,
	0xf6, 0x08, 0xf6, 0x0f, 0xbf, 0x34, 0xf2, 0x90, 0x0e, 0x93,
	0xe4, 0x93, 0xff, 0xe5, 0x4b, 0xc3, 0x9f, 0x50, 0x04, 0x7f,
	0x05, 0x80, 0x02, 0x7f, 0xfb, 0x78, 0xbd, 0xa6, 0x07, 0x12,
	0x0f, 0x04, 0x40, 0x04, 0x7f, 0x03, 0x80, 0x02, 0x7f, 0x30,
	0x78, 0xbc, 0xa6, 0x07, 0xe6, 0x18, 0xf6, 0x08, 0xe6, 0x78,
	0xb9, 0xf6, 0x78, 0xbc, 0xe6, 0x78, 0xba, 0xf6, 0x78, 0xbf,
	0x76, 0x33, 0xe4, 0x08, 0xf6, 0x78, 0xb8, 0x76, 0x01, 0x75,
	0x4a, 0x02, 0x78, 0xb6, 0xf6, 0x08, 0xf6, 0x74, 0xff, 0x78,
	0xc1, 0xf6, 0x08, 0xf6, 0x75, 0x1f, 0x01, 0x78, 0xbc, 0xe6,
	0x75, 0xf0, 0x05, 0xa4, 0xf5, 0x4b, 0x12, 0x0a, 0xff, 0xc2,
	0x37, 0x22, 0x78, 0xb8, 0xe6, 0xd3, 0x94, 0x00, 0x40, 0x02,
	0x16, 0x22, 0xe5, 0x1f, 0xb4, 0x05, 0x23, 0xe4, 0xf5, 0x1f,
	0xc2, 0x01, 0x78, 0xb6, 0xe6, 0xfe, 0x08, 0xe6, 0xff, 0x78,
	0x4e, 0xa6, 0x06, 0x08, 0xa6, 0x07, 0xa2, 0x37, 0xe4, 0x33,
	0xf5, 0x3c, 0x90, 0x30, 0x28, 0xf0, 0x75, 0x1e, 0x10, 0xd2,
	0x35, 0x22, 0xe5, 0x4b, 0x75, 0xf0, 0x05, 0x84, 0x78, 0xbc,
	0xf6, 0x90, 0x0e, 0x8c, 0xe4, 0x93, 0xff, 0x25, 0xe0, 0x24,
	0x0a, 0xf8, 0xe6, 0xfc, 0x08, 0xe6, 0xfd, 0x78, 0xbc, 0xe6,
	0x25, 0xe0, 0x24, 0x4e, 0xf8, 0xa6, 0x04, 0x08, 0xa6, 0x05,
	0xef, 0x12, 0x0f, 0x0b, 0xd3, 0x78, 0xb7, 0x96, 0xee, 0x18,
	0x96, 0x40, 0x0d, 0x78, 0xbc, 0xe6, 0x78, 0xb9, 0xf6, 0x78,
	0xb6, 0xa6, 0x06, 0x08, 0xa6, 0x07, 0x90, 0x0e, 0x8c, 0xe4,
	0x93, 0x12, 0x0f, 0x0b, 0xc3, 0x78, 0xc2, 0x96, 0xee, 0x18,
	0x96, 0x50, 0x0d, 0x78, 0xbc, 0xe6, 0x78, 0xba, 0xf6, 0x78,
	0xc1, 0xa6, 0x06, 0x08, 0xa6, 0x07, 0x78, 0xb6, 0xe6, 0xfe,
	0x08, 0xe6, 0xc3, 0x78, 0xc2, 0x96, 0xff, 0xee, 0x18, 0x96,
	0x78, 0xc3, 0xf6, 0x08, 0xa6, 0x07, 0x90, 0x0e, 0x95, 0xe4,
	0x18, 0x12, 0x0e, 0xe9, 0x40, 0x02, 0xd2, 0x37, 0x78, 0xbc,
	0xe6, 0x08, 0x26, 0x08, 0xf6, 0xe5, 0x1f, 0x64, 0x01, 0x70,
	0x4a, 0xe6, 0xc3, 0x78, 0xc0, 0x12, 0x0e, 0xdf, 0x40, 0x05,
	0x12, 0x0e, 0xda, 0x40, 0x39, 0x12, 0x0f, 0x02, 0x40, 0x04,
	0x7f, 0xfe, 0x80, 0x02, 0x7f, 0x02, 0x78, 0xbd, 0xa6, 0x07,
	0x78, 0xb9, 0xe6, 0x24, 0x03, 0x78, 0xbf, 0xf6, 0x78, 0xb9,
	0xe6, 0x24, 0xfd, 0x78, 0xc0, 0xf6, 0x12, 0x0f, 0x02, 0x40,
	0x06, 0x78, 0xc0, 0xe6, 0xff, 0x80, 0x04, 0x78, 0xbf, 0xe6,
	0xff, 0x78, 0xbe, 0xa6, 0x07, 0x75, 0x1f, 0x02, 0x78, 0xb8,
	0x76, 0x01, 0x02, 0x02, 0x4a, 0xe5, 0x1f, 0x64, 0x02, 0x60,
	0x03, 0x02, 0x02, 0x2a, 0x78, 0xbe, 0xe6, 0xff, 0xc3, 0x78,
	0xc0, 0x12, 0x0e, 0xe0, 0x40, 0x08, 0x12, 0x0e, 0xda, 0x50,
	0x03, 0x02, 0x02, 0x28, 0x12, 0x0f, 0x02, 0x40, 0x04, 0x7f,
	0xff, 0x80, 0x02, 0x7f, 0x01, 0x78, 0xbd, 0xa6, 0x07, 0x78,
	0xb9, 0xe6, 0x04, 0x78, 0xbf, 0xf6, 0x78, 0xb9, 0xe6, 0x14,
	0x78, 0xc0, 0xf6, 0x18, 0x12, 0x0f, 0x04, 0x40, 0x04, 0xe6,
	0xff, 0x80, 0x02, 0x7f, 0x00, 0x78, 0xbf, 0xa6, 0x07, 0xd3,
	0x08, 0xe6, 0x64, 0x80, 0x94, 0x80, 0x40, 0x04, 0xe6, 0xff,
	0x80, 0x02, 0x7f, 0x00, 0x78, 0xc0, 0xa6, 0x07, 0xc3, 0x18,
	0xe6, 0x64, 0x80, 0x94, 0xb3, 0x50, 0x04, 0xe6, 0xff, 0x80,
	0x02, 0x7f, 0x33, 0x78, 0xbf, 0xa6, 0x07, 0xc3, 0x08, 0xe6,
	0x64, 0x80, 0x94, 0xb3, 0x50, 0x04, 0xe6, 0xff, 0x80, 0x02,
	0x7f, 0x33, 0x78, 0xc0, 0xa6, 0x07, 0x12, 0x0f, 0x02, 0x40,
	0x06, 0x78, 0xc0, 0xe6, 0xff, 0x80, 0x04, 0x78, 0xbf, 0xe6,
	0xff, 0x78, 0xbe, 0xa6, 0x07, 0x75, 0x1f, 0x03, 0x78, 0xb8,
	0x76, 0x01, 0x80, 0x20, 0xe5, 0x1f, 0x64, 0x03, 0x70, 0x26,
	0x78, 0xbe, 0xe6, 0xff, 0xc3, 0x78, 0xc0, 0x12, 0x0e, 0xe0,
	0x40, 0x05, 0x12, 0x0e, 0xda, 0x40, 0x09, 0x78, 0xb9, 0xe6,
	0x78, 0xbe, 0xf6, 0x75, 0x1f, 0x04, 0x78, 0xbe, 0xe6, 0x75,
	0xf0, 0x05, 0xa4, 0xf5, 0x4b, 0x02, 0x0a, 0xff, 0xe5, 0x1f,
	0xb4, 0x04, 0x10, 0x90, 0x0e, 0x94, 0xe4, 0x78, 0xc3, 0x12,
	0x0e, 0xe9, 0x40, 0x02, 0xd2, 0x37, 0x75, 0x1f, 0x05, 0x22,
	0x30, 0x01, 0x03, 0x02, 0x04, 0xc0, 0x30, 0x02, 0x03, 0x02,
	0x04, 0xc0, 0x90, 0x51, 0xa5, 0xe0, 0x78, 0x93, 0xf6, 0xa3,
	0xe0, 0x08, 0xf6, 0xa3, 0xe0, 0x08, 0xf6, 0xe5, 0x1f, 0x70,
	0x3c, 0x75, 0x1e, 0x20, 0xd2, 0x35, 0x12, 0x0c, 0x7a, 0x78,
	0x7e, 0xa6, 0x06, 0x08, 0xa6, 0x07, 0x78, 0x8b, 0xa6, 0x09,
	0x18, 0x76, 0x01, 0x12, 0x0c, 0x5b, 0x78, 0x4e, 0xa6, 0x06,
	0x08, 0xa6, 0x07, 0x78, 0x8b, 0xe6, 0x78, 0x6e, 0xf6, 0x75,
	0x1f, 0x01, 0x78, 0x93, 0xe6, 0x78, 0x90, 0xf6, 0x78, 0x94,
	0xe6, 0x78, 0x91, 0xf6, 0x78, 0x95, 0xe6, 0x78, 0x92, 0xf6,
	0x22, 0x79, 0x90, 0xe7, 0xd3, 0x78, 0x93, 0x96, 0x40, 0x05,
	0xe7, 0x96, 0xff, 0x80, 0x08, 0xc3, 0x79, 0x93, 0xe7, 0x78,
	0x90, 0x96, 0xff, 0x78, 0x88, 0x76, 0x00, 0x08, 0xa6, 0x07,
	0x79, 0x91, 0xe7, 0xd3, 0x78, 0x94, 0x96, 0x40, 0x05, 0xe7,
	0x96, 0xff, 0x80, 0x08, 0xc3, 0x79, 0x94, 0xe7, 0x78, 0x91,
	0x96, 0xff, 0x12, 0x0c, 0x8e, 0x79, 0x92, 0xe7, 0xd3, 0x78,
	0x95, 0x96, 0x40, 0x05, 0xe7, 0x96, 0xff, 0x80, 0x08, 0xc3,
	0x79, 0x95, 0xe7, 0x78, 0x92, 0x96, 0xff, 0x12, 0x0c, 0x8e,
	0x12, 0x0c, 0x5b, 0x78, 0x8a, 0xe6, 0x25, 0xe0, 0x24, 0x4e,
	0xf8, 0xa6, 0x06, 0x08, 0xa6, 0x07, 0x78, 0x8a, 0xe6, 0x24,
	0x6e, 0xf8, 0xa6, 0x09, 0x78, 0x8a, 0xe6, 0x24, 0x01, 0xff,
	0xe4, 0x33, 0xfe, 0xd3, 0xef, 0x94, 0x0f, 0xee, 0x64, 0x80,
	0x94, 0x80, 0x40, 0x04, 0x7f, 0x00, 0x80, 0x05, 0x78, 0x8a,
	0xe6, 0x04, 0xff, 0x78, 0x8a, 0xa6, 0x07, 0xe5, 0x1f, 0xb4,
	0x01, 0x0a, 0xe6, 0x60, 0x03, 0x02, 0x04, 0xc0, 0x75, 0x1f,
	0x02, 0x22, 0x12, 0x0c, 0x7a, 0x78, 0x80, 0xa6, 0x06, 0x08,
	0xa6, 0x07, 0x12, 0x0c, 0x7a, 0x78, 0x82, 0xa6, 0x06, 0x08,
	0xa6, 0x07, 0x78, 0x6e, 0xe6, 0x78, 0x8c, 0xf6, 0x78, 0x6e,
	0xe6, 0x78, 0x8d, 0xf6, 0x7f, 0x01, 0xef, 0x25, 0xe0, 0x24,
	0x4f, 0xf9, 0xc3, 0x78, 0x81, 0xe6, 0x97, 0x18, 0xe6, 0x19,
	0x97, 0x50, 0x0a, 0x12, 0x0c, 0x82, 0x78, 0x80, 0xa6, 0x04,
	0x08, 0xa6, 0x05, 0x74, 0x6e, 0x2f, 0xf9, 0x78, 0x8c, 0xe6,
	0xc3, 0x97, 0x50, 0x08, 0x74, 0x6e, 0x2f, 0xf8, 0xe6, 0x78,
	0x8c, 0xf6, 0xef, 0x25, 0xe0, 0x24, 0x4f, 0xf9, 0xd3, 0x78,
	0x83, 0xe6, 0x97, 0x18, 0xe6, 0x19, 0x97, 0x40, 0x0a, 0x12,
	0x0c, 0x82, 0x78, 0x82, 0xa6, 0x04, 0x08, 0xa6, 0x05, 0x74,
	0x6e, 0x2f, 0xf9, 0x78, 0x8d, 0xe6, 0xd3, 0x97, 0x40, 0x08,
	0x74, 0x6e, 0x2f, 0xf8, 0xe6, 0x78, 0x8d, 0xf6, 0x0f, 0xef,
	0x64, 0x10, 0x70, 0x9e, 0xc3, 0x79, 0x81, 0xe7, 0x78, 0x83,
	0x96, 0xff, 0x19, 0xe7, 0x18, 0x96, 0x78, 0x84, 0xf6, 0x08,
	0xa6, 0x07, 0xc3, 0x79, 0x8c, 0xe7, 0x78, 0x8d, 0x96, 0x08,
	0xf6, 0xd3, 0x79, 0x81, 0xe7, 0x78, 0x7f, 0x96, 0x19, 0xe7,
	0x18, 0x96, 0x40, 0x05, 0x09, 0xe7, 0x08, 0x80, 0x06, 0xc3,
	0x79, 0x7f, 0xe7, 0x78, 0x81, 0x96, 0xff, 0x19, 0xe7, 0x18,
	0x96, 0xfe, 0x78, 0x86, 0xa6, 0x06, 0x08, 0xa6, 0x07, 0x79,
	0x8c, 0xe7, 0xd3, 0x78, 0x8b, 0x96, 0x40, 0x05, 0xe7, 0x96,
	0xff, 0x80, 0x08, 0xc3, 0x79, 0x8b, 0xe7, 0x78, 0x8c, 0x96,
	0xff, 0x78, 0x8f, 0xa6, 0x07, 0xe5, 0x1f, 0x64, 0x02, 0x70,
	0x69, 0x90, 0x0e, 0x91, 0x93, 0xff, 0x18, 0xe6, 0xc3, 0x9f,
	0x50, 0x72, 0x12, 0x0c, 0x4a, 0x12, 0x0c, 0x2f, 0x90, 0x0e,
	0x8e, 0x12, 0x0c, 0x38, 0x78, 0x80, 0x12, 0x0c, 0x6b, 0x7b,
	0x04, 0x12, 0x0c, 0x1d, 0xc3, 0x12, 0x06, 0x45, 0x50, 0x56,
	0x90, 0x0e, 0x92, 0xe4, 0x93, 0xff, 0x78, 0x8f, 0xe6, 0x9f,
	0x40, 0x02, 0x80, 0x11, 0x90, 0x0e, 0x90, 0xe4, 0x93, 0xff,
	0xd3, 0x78, 0x89, 0xe6, 0x9f, 0x18, 0xe6, 0x94, 0x00, 0x40,
	0x03, 0x75, 0x1f, 0x05, 0x12, 0x0c, 0x4a, 0x12, 0x0c, 0x2f,
	0x90, 0x0e, 0x8f, 0x12, 0x0c, 0x38, 0x78, 0x7e, 0x12, 0x0c,
	0x6b, 0x7b, 0x40, 0x12, 0x0c, 0x1d, 0xd3, 0x12, 0x06, 0x45,
	0x40, 0x18, 0x75, 0x1f, 0x05, 0x22, 0xe5, 0x1f, 0xb4, 0x05,
	0x0f, 0xd2, 0x01, 0xc2, 0x02, 0xe4, 0xf5, 0x1f, 0xf5, 0x1e,
	0xd2, 0x35, 0xd2, 0x33, 0xd2, 0x36, 0x22, 0xef, 0x8d, 0xf0,
	0xa4, 0xa8, 0xf0, 0xcf, 0x8c, 0xf0, 0xa4, 0x28, 0xce, 0x8d,
	0xf0, 0xa4, 0x2e, 0xfe, 0x22, 0xbc, 0x00, 0x0b, 0xbe, 0x00,
	0x29, 0xef, 0x8d, 0xf0, 0x84, 0xff, 0xad, 0xf0, 0x22, 0xe4,
	0xcc, 0xf8, 0x75, 0xf0, 0x08, 0xef, 0x2f, 0xff, 0xee, 0x33,
	0xfe, 0xec, 0x33, 0xfc, 0xee, 0x9d, 0xec, 0x98, 0x40, 0x05,
	0xfc, 0xee, 0x9d, 0xfe, 0x0f, 0xd5, 0xf0, 0xe9, 0xe4, 0xce,
	0xfd, 0x22, 0xed, 0xf8, 0xf5, 0xf0, 0xee, 0x84, 0x20, 0xd2,
	0x1c, 0xfe, 0xad, 0xf0, 0x75, 0xf0, 0x08, 0xef, 0x2f, 0xff,
	0xed, 0x33, 0xfd, 0x40, 0x07, 0x98, 0x50, 0x06, 0xd5, 0xf0,
	0xf2, 0x22, 0xc3, 0x98, 0xfd, 0x0f, 0xd5, 0xf0, 0xea, 0x22,
	0xe8, 0x8f, 0xf0, 0xa4, 0xcc, 0x8b, 0xf0, 0xa4, 0x2c, 0xfc,
	0xe9, 0x8e, 0xf0, 0xa4, 0x2c, 0xfc, 0x8a, 0xf0, 0xed, 0xa4,
	0x2c, 0xfc, 0xea, 0x8e, 0xf0, 0xa4, 0xcd, 0xa8, 0xf0, 0x8b,
	0xf0, 0xa4, 0x2d, 0xcc, 0x38, 0x25, 0xf0, 0xfd, 0xe9, 0x8f,
	0xf0, 0xa4, 0x2c, 0xcd, 0x35, 0xf0, 0xfc, 0xeb, 0x8e, 0xf0,
	0xa4, 0xfe, 0xa9, 0xf0, 0xeb, 0x8f, 0xf0, 0xa4, 0xcf, 0xc5,
	0xf0, 0x2e, 0xcd, 0x39, 0xfe, 0xe4, 0x3c, 0xfc, 0xea, 0xa4,
	0x2d, 0xce, 0x35, 0xf0, 0xfd, 0xe4, 0x3c, 0xfc, 0x22, 0x75,
	0xf0, 0x08, 0x75, 0x82, 0x00, 0xef, 0x2f, 0xff, 0xee, 0x33,
	0xfe, 0xcd, 0x33, 0xcd, 0xcc, 0x33, 0xcc, 0xc5, 0x82, 0x33,
	0xc5, 0x82, 0x9b, 0xed, 0x9a, 0xec, 0x99, 0xe5, 0x82, 0x98,
	0x40, 0x0c, 0xf5, 0x82, 0xee, 0x9b, 0xfe, 0xed, 0x9a, 0xfd,
	0xec, 0x99, 0xfc, 0x0f, 0xd5, 0xf0, 0xd6, 0xe4, 0xce, 0xfb,
	0xe4, 0xcd, 0xfa, 0xe4, 0xcc, 0xf9, 0xa8, 0x82, 0x22, 0xb8,
	0x00, 0xc1, 0xb9, 0x00, 0x59, 0xba, 0x00, 0x2d, 0xec, 0x8b,
	0xf0, 0x84, 0xcf, 0xce, 0xcd, 0xfc, 0xe5, 0xf0, 0xcb, 0xf9,
	0x78, 0x18, 0xef, 0x2f, 0xff, 0xee, 0x33, 0xfe, 0xed, 0x33,
	0xfd, 0xec, 0x33, 0xfc, 0xeb, 0x33, 0xfb, 0x10, 0xd7, 0x03,
	0x99, 0x40, 0x04, 0xeb, 0x99, 0xfb, 0x0f, 0xd8, 0xe5, 0xe4,
	0xf9, 0xfa, 0x22, 0x78, 0x18, 0xef, 0x2f, 0xff, 0xee, 0x33,
	0xfe, 0xed, 0x33, 0xfd, 0xec, 0x33, 0xfc, 0xc9, 0x33, 0xc9,
	0x10, 0xd7, 0x05, 0x9b, 0xe9, 0x9a, 0x40, 0x07, 0xec, 0x9b,
	0xfc, 0xe9, 0x9a, 0xf9, 0x0f, 0xd8, 0xe0, 0xe4, 0xc9, 0xfa,
	0xe4, 0xcc, 0xfb, 0x22, 0x75, 0xf0, 0x10, 0xef, 0x2f, 0xff,
	0xee, 0x33, 0xfe, 0xed, 0x33, 0xfd, 0xcc, 0x33, 0xcc, 0xc8,
	0x33, 0xc8, 0x10, 0xd7, 0x07, 0x9b, 0xec, 0x9a, 0xe8, 0x99,
	0x40, 0x0a, 0xed, 0x9b, 0xfd, 0xec, 0x9a, 0xfc, 0xe8, 0x99,
	0xf8, 0x0f, 0xd5, 0xf0, 0xda, 0xe4, 0xcd, 0xfb, 0xe4, 0xcc,
	0xfa, 0xe4, 0xc8, 0xf9, 0x22, 0xeb, 0x9f, 0xf5, 0xf0, 0xea,
	0x9e, 0x42, 0xf0, 0xe9, 0x9d, 0x42, 0xf0, 0xe8, 0x9c, 0x45,
	0xf0, 0x22, 0xe8, 0x60, 0x0f, 0xec, 0xc3, 0x13, 0xfc, 0xed,
	0x13, 0xfd, 0xee, 0x13, 0xfe, 0xef, 0x13, 0xff, 0xd8, 0xf1,
	0x22, 0xe8, 0x60, 0x0f, 0xef, 0xc3, 0x33, 0xff, 0xee, 0x33,
	0xfe, 0xed, 0x33, 0xfd, 0xec, 0x33, 0xfc, 0xd8, 0xf1, 0x22,
	0xe4, 0x93, 0xfc, 0x74, 0x01, 0x93, 0xfd, 0x74, 0x02, 0x93,
	0xfe, 0x74, 0x03, 0x93, 0xff, 0x22, 0xe6, 0xfb, 0x08, 0xe6,
	0xf9, 0x08, 0xe6, 0xfa, 0x08, 0xe6, 0xcb, 0xf8, 0x22, 0xec,
	0xf6, 0x08, 0xed, 0xf6, 0x08, 0xee, 0xf6, 0x08, 0xef, 0xf6,
	0x22, 0xa4, 0x25, 0x82, 0xf5, 0x82, 0xe5, 0xf0, 0x35, 0x83,
	0xf5, 0x83, 0x22, 0xd0, 0x83, 0xd0, 0x82, 0xf8, 0xe4, 0x93,
	0x70, 0x12, 0x74, 0x01, 0x93, 0x70, 0x0d, 0xa3, 0xa3, 0x93,
	0xf8, 0x74, 0x01, 0x93, 0xf5, 0x82, 0x88, 0x83, 0xe4, 0x73,
	0x74, 0x02, 0x93, 0x68, 0x60, 0xef, 0xa3, 0xa3, 0xa3, 0x80,
	0xdf, 0x90, 0x38, 0x04, 0x78, 0x52, 0x12, 0x0b, 0xfd, 0x90,
	0x38, 0x00, 0xe0, 0xfe, 0xa3, 0xe0, 0xfd, 0xed, 0xff, 0xc3,
	0x12, 0x0b, 0x9e, 0x90, 0x38, 0x10, 0x12, 0x0b, 0x92, 0x90,
	0x38, 0x06, 0x78, 0x54, 0x12, 0x0b, 0xfd, 0x90, 0x38, 0x02,
	0xe0, 0xfe, 0xa3, 0xe0, 0xfd, 0xed, 0xff, 0xc3, 0x12, 0x0b,
	0x9e, 0x90, 0x38, 0x12, 0x12, 0x0b, 0x92, 0xa3, 0xe0, 0xb4,
	0x31, 0x07, 0x78, 0x52, 0x79, 0x52, 0x12, 0x0c, 0x13, 0x90,
	0x38, 0x14, 0xe0, 0xb4, 0x71, 0x15, 0x78, 0x52, 0xe6, 0xfe,
	0x08, 0xe6, 0x78, 0x02, 0xce, 0xc3, 0x13, 0xce, 0x13, 0xd8,
	0xf9, 0x79, 0x53, 0xf7, 0xee, 0x19, 0xf7, 0x90, 0x38, 0x15,
	0xe0, 0xb4, 0x31, 0x07, 0x78, 0x54, 0x79, 0x54, 0x12, 0x0c,
	0x13, 0x90, 0x38, 0x15, 0xe0, 0xb4, 0x71, 0x15, 0x78, 0x54,
	0xe6, 0xfe, 0x08, 0xe6, 0x78, 0x02, 0xce, 0xc3, 0x13, 0xce,
	0x13, 0xd8, 0xf9, 0x79, 0x55, 0xf7, 0xee, 0x19, 0xf7, 0x79,
	0x52, 0x12, 0x0b, 0xd9, 0x09, 0x12, 0x0b, 0xd9, 0xaf, 0x47,
	0x12, 0x0b, 0xb2, 0xe5, 0x44, 0xfb, 0x7a, 0x00, 0xfd, 0x7c,
	0x00, 0x12, 0x04, 0xd3, 0x78, 0x5a, 0xa6, 0x06, 0x08, 0xa6,
	0x07, 0xaf, 0x45, 0x12, 0x0b, 0xb2, 0xad, 0x03, 0x7c, 0x00,
	0x12, 0x04, 0xd3, 0x78, 0x56, 0xa6, 0x06, 0x08, 0xa6, 0x07,
	0xaf, 0x48, 0x78, 0x54, 0x12, 0x0b, 0xb4, 0xe5, 0x43, 0xfb,
	0xfd, 0x7c, 0x00, 0x12, 0x04, 0xd3, 0x78, 0x5c, 0xa6, 0x06,
	0x08, 0xa6, 0x07, 0xaf, 0x46, 0x7e, 0x00, 0x78, 0x54, 0x12,
	0x0b, 0xb6, 0xad, 0x03, 0x7c, 0x00, 0x12, 0x04, 0xd3, 0x78,
	0x58, 0xa6, 0x06, 0x08, 0xa6, 0x07, 0xc3, 0x78, 0x5b, 0xe6,
	0x94, 0x08, 0x18, 0xe6, 0x94, 0x00, 0x50, 0x05, 0x76, 0x00,
	0x08, 0x76, 0x08, 0xc3, 0x78, 0x5d, 0xe6, 0x94, 0x08, 0x18,
	0xe6, 0x94, 0x00, 0x50, 0x05, 0x76, 0x00, 0x08, 0x76, 0x08,
	0x78, 0x5a, 0x12, 0x0b, 0xc6, 0xff, 0xd3, 0x78, 0x57, 0xe6,
	0x9f, 0x18, 0xe6, 0x9e, 0x40, 0x0e, 0x78, 0x5a, 0xe6, 0x13,
	0xfe, 0x08, 0xe6, 0x78, 0x57, 0x12, 0x0c, 0x08, 0x80, 0x04,
	0x7e, 0x00, 0x7f, 0x00, 0x78, 0x5e, 0x12, 0x0b, 0xbe, 0xff,
	0xd3, 0x78, 0x59, 0xe6, 0x9f, 0x18, 0xe6, 0x9e, 0x40, 0x0e,
	0x78, 0x5c, 0xe6, 0x13, 0xfe, 0x08, 0xe6, 0x78, 0x59, 0x12,
	0x0c, 0x08, 0x80, 0x04, 0x7e, 0x00, 0x7f, 0x00, 0xe4, 0xfc,
	0xfd, 0x78, 0x62, 0x12, 0x06, 0x99, 0x78, 0x5a, 0x12, 0x0b,
	0xc6, 0x78, 0x57, 0x26, 0xff, 0xee, 0x18, 0x36, 0xfe, 0x78,
	0x66, 0x12, 0x0b, 0xbe, 0x78, 0x59, 0x26, 0xff, 0xee, 0x18,
	0x36, 0xfe, 0xe4, 0xfc, 0xfd, 0x78, 0x6a, 0x12, 0x06, 0x99,
	0x12, 0x0b, 0xce, 0x78, 0x66, 0x12, 0x06, 0x8c, 0xd3, 0x12,
	0x06, 0x45, 0x40, 0x08, 0x12, 0x0b, 0xce, 0x78, 0x66, 0x12,
	0x06, 0x99, 0x78, 0x54, 0x12, 0x0b, 0xd0, 0x78, 0x6a, 0x12,
	0x06, 0x8c, 0xd3, 0x12, 0x06, 0x45, 0x40, 0x0a, 0x78, 0x54,
	0x12, 0x0b, 0xd0, 0x78, 0x6a, 0x12, 0x06, 0x99, 0x78, 0x61,
	0xe6, 0x90, 0x60, 0x01, 0xf0, 0x78, 0x65, 0xe6, 0xa3, 0xf0,
	0x78, 0x69, 0xe6, 0xa3, 0xf0, 0x78, 0x55, 0xe6, 0xa3, 0xf0,
	0x7d, 0x01, 0x78, 0x61, 0x12, 0x0b, 0xe9, 0x24, 0x01, 0x12,
	0x0b, 0xa6, 0x78, 0x65, 0x12, 0x0b, 0xe9, 0x24, 0x02, 0x12,
	0x0b, 0xa6, 0x78, 0x69, 0x12, 0x0b, 0xe9, 0x24, 0x03, 0x12,
	0x0b, 0xa6, 0x78, 0x6d, 0x12, 0x0b, 0xe9, 0x24, 0x04, 0x12,
	0x0b, 0xa6, 0x0d, 0xbd, 0x05, 0xd4, 0xc2, 0x0e, 0xc2, 0x06,
	0x22, 0x85, 0x08, 0x41, 0x90, 0x30, 0x24, 0xe0, 0xf5, 0x3d,
	0xa3, 0xe0, 0xf5, 0x3e, 0xa3, 0xe0, 0xf5, 0x3f, 0xa3, 0xe0,
	0xf5, 0x40, 0xa3, 0xe0, 0xf5, 0x3c, 0xd2, 0x34, 0xe5, 0x41,
	0x12, 0x06, 0xb1, 0x09, 0x31, 0x03, 0x09, 0x35, 0x04, 0x09,
	0x3b, 0x05, 0x09, 0x3e, 0x06, 0x09, 0x41, 0x07, 0x09, 0x4a,
	0x08, 0x09, 0x5b, 0x12, 0x09, 0x73, 0x18, 0x09, 0x89, 0x19,
	0x09, 0x5e, 0x1a, 0x09, 0x6a, 0x1b, 0x09, 0xad, 0x80, 0x09,
	0xb2, 0x81, 0x0a, 0x1d, 0x8f, 0x0a, 0x09, 0x90, 0x0a, 0x1d,
	0x91, 0x0a, 0x1d, 0x92, 0x0a, 0x1d, 0x93, 0x0a, 0x1d, 0x94,
	0x0a, 0x1d, 0x98, 0x0a, 0x17, 0x9f, 0x0a, 0x1a, 0xec, 0x00,
	0x00, 0x0a, 0x38, 0x12, 0x0f, 0x74, 0x22, 0x12, 0x0f, 0x74,
	0xd2, 0x03, 0x22, 0xd2, 0x03, 0x22, 0xc2, 0x03, 0x22, 0xa2,
	0x37, 0xe4, 0x33, 0xf5, 0x3c, 0x02, 0x0a, 0x1d, 0xc2, 0x01,
	0xc2, 0x02, 0xc2, 0x03, 0x12, 0x0d, 0x0d, 0x75, 0x1e, 0x70,
	0xd2, 0x35, 0x02, 0x0a, 0x1d, 0x02, 0x0a, 0x04, 0x85, 0x40,
	0x4a, 0x85, 0x3c, 0x4b, 0x12, 0x0a, 0xff, 0x02, 0x0a, 0x1d,
	0x85, 0x4a, 0x40, 0x85, 0x4b, 0x3c, 0x02, 0x0a, 0x1d, 0xe4,
	0xf5, 0x22, 0xf5, 0x23, 0x85, 0x40, 0x31, 0x85, 0x3f, 0x30,
	0x85, 0x3e, 0x2f, 0x85, 0x3d, 0x2e, 0x12, 0x0f, 0x46, 0x80,
	0x1f, 0x75, 0x22, 0x00, 0x75, 0x23, 0x01, 0x74, 0xff, 0xf5,
	0x2d, 0xf5, 0x2c, 0xf5, 0x2b, 0xf5, 0x2a, 0x12, 0x0f, 0x46,
	0x85, 0x2d, 0x40, 0x85, 0x2c, 0x3f, 0x85, 0x2b, 0x3e, 0x85,
	0x2a, 0x3d, 0xe4, 0xf5, 0x3c, 0x80, 0x70, 0x12, 0x0f, 0x16,
	0x80, 0x6b, 0x85, 0x3d, 0x45, 0x85, 0x3e, 0x46, 0xe5, 0x47,
	0xc3, 0x13, 0xff, 0xe5, 0x45, 0xc3, 0x9f, 0x50, 0x02, 0x8f,
	0x45, 0xe5, 0x48, 0xc3, 0x13, 0xff, 0xe5, 0x46, 0xc3, 0x9f,
	0x50, 0x02, 0x8f, 0x46, 0xe5, 0x47, 0xc3, 0x13, 0xff, 0xfd,
	0xe5, 0x45, 0x2d, 0xfd, 0xe4, 0x33, 0xfc, 0xe5, 0x44, 0x12,
	0x0f, 0x90, 0x40, 0x05, 0xe5, 0x44, 0x9f, 0xf5, 0x45, 0xe5,
	0x48, 0xc3, 0x13, 0xff, 0xfd, 0xe5, 0x46, 0x2d, 0xfd, 0xe4,
	0x33, 0xfc, 0xe5, 0x43, 0x12, 0x0f, 0x90, 0x40, 0x05, 0xe5,
	0x43, 0x9f, 0xf5, 0x46, 0x12, 0x06, 0xd7, 0x80, 0x14, 0x85,
	0x40, 0x48, 0x85, 0x3f, 0x47, 0x85, 0x3e, 0x46, 0x85, 0x3d,
	0x45, 0x80, 0x06, 0x02, 0x06, 0xd7, 0x12, 0x0d, 0x7e, 0x90,
	0x30, 0x24, 0xe5, 0x3d, 0xf0, 0xa3, 0xe5, 0x3e, 0xf0, 0xa3,
	0xe5, 0x3f, 0xf0, 0xa3, 0xe5, 0x40, 0xf0, 0xa3, 0xe5, 0x3c,
	0xf0, 0x90, 0x30, 0x23, 0xe4, 0xf0, 0x22, 0xc0, 0xe0, 0xc0,
	0x83, 0xc0, 0x82, 0xc0, 0xd0, 0x90, 0x3f, 0x0c, 0xe0, 0xf5,
	0x32, 0xe5, 0x32, 0x30, 0xe3, 0x74, 0x30, 0x36, 0x66, 0x90,
	0x60, 0x19, 0xe0, 0xf5, 0x0a, 0xa3, 0xe0, 0xf5, 0x0b, 0x90,
	0x60, 0x1d, 0xe0, 0xf5, 0x14, 0xa3, 0xe0, 0xf5, 0x15, 0x90,
	0x60, 0x21, 0xe0, 0xf5, 0x0c, 0xa3, 0xe0, 0xf5, 0x0d, 0x90,
	0x60, 0x29, 0xe0, 0xf5, 0x0e, 0xa3, 0xe0, 0xf5, 0x0f, 0x90,
	0x60, 0x31, 0xe0, 0xf5, 0x10, 0xa3, 0xe0, 0xf5, 0x11, 0x90,
	0x60, 0x39, 0xe0, 0xf5, 0x12, 0xa3, 0xe0, 0xf5, 0x13, 0x30,
	0x01, 0x06, 0x30, 0x33, 0x03, 0xd3, 0x80, 0x01, 0xc3, 0x92,
	0x09, 0x30, 0x02, 0x06, 0x30, 0x33, 0x03, 0xd3, 0x80, 0x01,
	0xc3, 0x92, 0x0a, 0x30, 0x33, 0x0c, 0x30, 0x03, 0x09, 0x20,
	0x02, 0x06, 0x20, 0x01, 0x03, 0xd3, 0x80, 0x01, 0xc3, 0x92,
	0x0b, 0x90, 0x30, 0x01, 0xe0, 0x44, 0x40, 0xf0, 0xe0, 0x54,
	0xbf, 0xf0, 0xe5, 0x32, 0x30, 0xe1, 0x14, 0x30, 0x34, 0x11,
	0x90, 0x30, 0x22, 0xe0, 0xf5, 0x08, 0xe4, 0xf0, 0x30, 0x00,
	0x03, 0xd3, 0x80, 0x01, 0xc3, 0x92, 0x08, 0xe5, 0x32, 0x30,
	0xe5, 0x12, 0x90, 0x56, 0xa1, 0xe0, 0xf5, 0x09, 0x30, 0x31,
	0x09, 0x30, 0x05, 0x03, 0xd3, 0x80, 0x01, 0xc3, 0x92, 0x0d,
	0x90, 0x3f, 0x0c, 0xe5, 0x32, 0xf0, 0xd0, 0xd0, 0xd0, 0x82,
	0xd0, 0x83, 0xd0, 0xe0, 0x32, 0x90, 0x0e, 0x7e, 0xe4, 0x93,
	0xfe, 0x74, 0x01, 0x93, 0xff, 0xc3, 0x90, 0x0e, 0x7c, 0x74,
	0x01, 0x93, 0x9f, 0xff, 0xe4, 0x93, 0x9e, 0xfe, 0xe4, 0x8f,
	0x3b, 0x8e, 0x3a, 0xf5, 0x39, 0xf5, 0x38, 0xab, 0x3b, 0xaa,
	0x3a, 0xa9, 0x39, 0xa8, 0x38, 0xaf, 0x4b, 0xfc, 0xfd, 0xfe,
	0x12, 0x05, 0x28, 0x12, 0x0d, 0xe1, 0xe4, 0x7b, 0xff, 0xfa,
	0xf9, 0xf8, 0x12, 0x05, 0xb3, 0x12, 0x0d, 0xe1, 0x90, 0x0e,
	0x69, 0xe4, 0x12, 0x0d, 0xf6, 0x12, 0x0d, 0xe1, 0xe4, 0x85,
	0x4a, 0x37, 0xf5, 0x36, 0xf5, 0x35, 0xf5, 0x34, 0xaf, 0x37,
	0xae, 0x36, 0xad, 0x35, 0xac, 0x34, 0xa3, 0x12, 0x0d, 0xf6,
	0x8f, 0x37, 0x8e, 0x36, 0x8d, 0x35, 0x8c, 0x34, 0xe5, 0x3b,
	0x45, 0x37, 0xf5, 0x3b, 0xe5, 0x3a, 0x45, 0x36, 0xf5, 0x3a,
	0xe5, 0x39, 0x45, 0x35, 0xf5, 0x39, 0xe5, 0x38, 0x45, 0x34,
	0xf5, 0x38, 0xe4, 0xf5, 0x22, 0xf5, 0x23, 0x85, 0x3b, 0x31,
	0x85, 0x3a, 0x30, 0x85, 0x39, 0x2f, 0x85, 0x38, 0x2e, 0x02,
	0x0f, 0x46, 0xe0, 0xa3, 0xe0, 0x75, 0xf0, 0x02, 0xa4, 0xff,
	0xae, 0xf0, 0xc3, 0x08, 0xe6, 0x9f, 0xf6, 0x18, 0xe6, 0x9e,
	0xf6, 0x22, 0xff, 0xe5, 0xf0, 0x34, 0x60, 0x8f, 0x82, 0xf5,
	0x83, 0xec, 0xf0, 0x22, 0x78, 0x52, 0x7e, 0x00, 0xe6, 0xfc,
	0x08, 0xe6, 0xfd, 0x02, 0x04, 0xc1, 0xe4, 0xfc, 0xfd, 0x12,
	0x06, 0x99, 0x78, 0x5c, 0xe6, 0xc3, 0x13, 0xfe, 0x08, 0xe6,
	0x13, 0x22, 0x78, 0x52, 0xe6, 0xfe, 0x08, 0xe6, 0xff, 0xe4,
	0xfc, 0xfd, 0x22, 0xe7, 0xc4, 0xf8, 0x54, 0xf0, 0xc8, 0x68,
	0xf7, 0x09, 0xe7, 0xc4, 0x54, 0x0f, 0x48, 0xf7, 0x22, 0xe6,
	0xfc, 0xed, 0x75, 0xf0, 0x04, 0xa4, 0x22, 0x12, 0x06, 0x7c,
	0x8f, 0x48, 0x8e, 0x47, 0x8d, 0x46, 0x8c, 0x45, 0x22, 0xe0,
	0xfe, 0xa3, 0xe0, 0xfd, 0xee, 0xf6, 0xed, 0x08, 0xf6, 0x22,
	0x13, 0xff, 0xc3, 0xe6, 0x9f, 0xff, 0x18, 0xe6, 0x9e, 0xfe,
	0x22, 0xe6, 0xc3, 0x13, 0xf7, 0x08, 0xe6, 0x13, 0x09, 0xf7,
	0x22, 0xad, 0x39, 0xac, 0x38, 0xfa, 0xf9, 0xf8, 0x12, 0x05,
	0x28, 0x8f, 0x3b, 0x8e, 0x3a, 0x8d, 0x39, 0x8c, 0x38, 0xab,
	0x37, 0xaa, 0x36, 0xa9, 0x35, 0xa8, 0x34, 0x22, 0x93, 0xff,
	0xe4, 0xfc, 0xfd, 0xfe, 0x12, 0x05, 0x28, 0x8f, 0x37, 0x8e,
	0x36, 0x8d, 0x35, 0x8c, 0x34, 0x22, 0x78, 0x84, 0xe6, 0xfe,
	0x08, 0xe6, 0xff, 0xe4, 0x8f, 0x37, 0x8e, 0x36, 0xf5, 0x35,
	0xf5, 0x34, 0x22, 0x90, 0x0e, 0x8c, 0xe4, 0x93, 0x25, 0xe0,
	0x24, 0x0a, 0xf8, 0xe6, 0xfe, 0x08, 0xe6, 0xff, 0x22, 0xe6,
	0xfe, 0x08, 0xe6, 0xff, 0xe4, 0x8f, 0x3b, 0x8e, 0x3a, 0xf5,
	0x39, 0xf5, 0x38, 0x22, 0x78, 0x4e, 0xe6, 0xfe, 0x08, 0xe6,
	0xff, 0x22, 0xef, 0x25, 0xe0, 0x24, 0x4e, 0xf8, 0xe6, 0xfc,
	0x08, 0xe6, 0xfd, 0x22, 0x78, 0x89, 0xef, 0x26, 0xf6, 0x18,
	0xe4, 0x36, 0xf6, 0x22, 0x75, 0x89, 0x03, 0x75, 0xa8, 0x01,
	0x75, 0xb8, 0x04, 0x75, 0x34, 0xff, 0x75, 0x35, 0x0e, 0x75,
	0x36, 0x15, 0x75, 0x37, 0x0d, 0x12, 0x0e, 0x9a, 0x12, 0x00,
	0x09, 0x12, 0x0f, 0x16, 0x12, 0x00, 0x06, 0xd2, 0x00, 0xd2,
	0x34, 0xd2, 0xaf, 0x75, 0x34, 0xff, 0x75, 0x35, 0x0e, 0x75,
	0x36, 0x49, 0x75, 0x37, 0x03, 0x12, 0x0e, 0x9a, 0x30, 0x08,
	0x09, 0xc2, 0x34, 0x12, 0x08, 0xcb, 0xc2, 0x08, 0xd2, 0x34,
	0x30, 0x0b, 0x09, 0xc2, 0x36, 0x12, 0x02, 0x6c, 0xc2, 0x0b,
	0xd2, 0x36, 0x30, 0x09, 0x09, 0xc2, 0x36, 0x12, 0x00, 0x0e,
	0xc2, 0x09, 0xd2, 0x36, 0x30, 0x0e, 0x03, 0x12, 0x06, 0xd7,
	0x30, 0x35, 0xd3, 0x90, 0x30, 0x29, 0xe5, 0x1e, 0xf0, 0xb4,
	0x10, 0x05, 0x90, 0x30, 0x23, 0xe4, 0xf0, 0xc2, 0x35, 0x80,
	0xc1, 0xe4, 0xf5, 0x4b, 0x90, 0x0e, 0x7a, 0x93, 0xff, 0xe4,
	0x8f, 0x37, 0xf5, 0x36, 0xf5, 0x35, 0xf5, 0x34, 0xaf, 0x37,
	0xae, 0x36, 0xad, 0x35, 0xac, 0x34, 0x90, 0x0e, 0x6a, 0x12,
	0x0d, 0xf6, 0x8f, 0x37, 0x8e, 0x36, 0x8d, 0x35, 0x8c, 0x34,
	0x90, 0x0e, 0x72, 0x12, 0x06, 0x7c, 0xef, 0x45, 0x37, 0xf5,
	0x37, 0xee, 0x45, 0x36, 0xf5, 0x36, 0xed, 0x45, 0x35, 0xf5,
	0x35, 0xec, 0x45, 0x34, 0xf5, 0x34, 0xe4, 0xf5, 0x22, 0xf5,
	0x23, 0x85, 0x37, 0x31, 0x85, 0x36, 0x30, 0x85, 0x35, 0x2f,
	0x85, 0x34, 0x2e, 0x12, 0x0f, 0x46, 0xe4, 0xf5, 0x22, 0xf5,
	0x23, 0x90, 0x0e, 0x72, 0x12, 0x0d, 0xea, 0x12, 0x0f, 0x46,
	0xe4, 0xf5, 0x22, 0xf5, 0x23, 0x90, 0x0e, 0x6e, 0x12, 0x0d,
	0xea, 0x02, 0x0f, 0x46, 0xe5, 0x40, 0x24, 0xf2, 0xf5, 0x37,
	0xe5, 0x3f, 0x34, 0x43, 0xf5, 0x36, 0xe5, 0x3e, 0x34, 0xa2,
	0xf5, 0x35, 0xe5, 0x3d, 0x34, 0x28, 0xf5, 0x34, 0xe5, 0x37,
	0xff, 0xe4, 0xfe, 0xfd, 0xfc, 0x78, 0x18, 0x12, 0x06, 0x69,
	0x8f, 0x40, 0x8e, 0x3f, 0x8d, 0x3e, 0x8c, 0x3d, 0xe5, 0x37,
	0x54, 0xa0, 0xff, 0xe5, 0x36, 0xfe, 0xe4, 0xfd, 0xfc, 0x78,
	0x07, 0x12, 0x06, 0x56, 0x78, 0x10, 0x12, 0x0f, 0x9a, 0xe4,
	0xff, 0xfe, 0xe5, 0x35, 0xfd, 0xe4, 0xfc, 0x78, 0x0e, 0x12,
	0x06, 0x56, 0x12, 0x0f, 0x9d, 0xe4, 0xff, 0xfe, 0xfd, 0xe5,
	0x34, 0xfc, 0x78, 0x18, 0x12, 0x06, 0x56, 0x78, 0x08, 0x12,
	0x0f, 0x9a, 0x22, 0x8f, 0x3b, 0x8e, 0x3a, 0x8d, 0x39, 0x8c,
	0x38, 0x22, 0x12, 0x06, 0x7c, 0x8f, 0x31, 0x8e, 0x30, 0x8d,
	0x2f, 0x8c, 0x2e, 0x22, 0x93, 0xf9, 0xf8, 0x02, 0x06, 0x69,
	0x00, 0x00, 0x00, 0x00, 0x12, 0x01, 0x17, 0x08, 0x31, 0x15,
	0x53, 0x54, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x13, 0x01,
	0x10, 0x01, 0x56, 0x40, 0x1a, 0x30, 0x29, 0x7e, 0x00, 0x30,
	0x04, 0x20, 0xdf, 0x30, 0x05, 0x40, 0xbf, 0x50, 0x03, 0x00,
	0xfd, 0x50, 0x27, 0x01, 0xfe, 0x60, 0x00, 0x11, 0x00, 0x3f,
	0x05, 0x30, 0x00, 0x3f, 0x06, 0x22, 0x00, 0x3f, 0x01, 0x2a,
	0x00, 0x3f, 0x02, 0x00, 0x00, 0x36, 0x06, 0x07, 0x00, 0x3f,
	0x0b, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x40,
	0xbf, 0x30, 0x01, 0x00, 0xbf, 0x30, 0x29, 0x70, 0x00, 0x3a,
	0x00, 0x00, 0xff, 0x3a, 0x00, 0x00, 0xff, 0x36, 0x03, 0x36,
	0x02, 0x41, 0x44, 0x58, 0x20, 0x18, 0x10, 0x0a, 0x04, 0x04,
	0x00, 0x03, 0xff, 0x64, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x02, 0x04, 0x06, 0x06, 0x00, 0x02, 0x50,
	0x00, 0x5c, 0x50, 0x3c, 0x28, 0x1e, 0x10, 0x10, 0x50, 0x2d,
	0x28, 0x16, 0x10, 0x10, 0x02, 0x00, 0x10, 0x0c, 0x10, 0x04,
	0x0c, 0x6e, 0x06, 0x05, 0x00, 0xa5, 0x5a, 0x00, 0xae, 0x35,
	0xaf, 0x36, 0xe4, 0xfd, 0xed, 0xc3, 0x95, 0x37, 0x50, 0x33,
	0x12, 0x0f, 0xe2, 0xe4, 0x93, 0xf5, 0x38, 0x74, 0x01, 0x93,
	0xf5, 0x39, 0x45, 0x38, 0x60, 0x23, 0x85, 0x39, 0x82, 0x85,
	0x38, 0x83, 0xe0, 0xfc, 0x12, 0x0f, 0xe2, 0x74, 0x03, 0x93,
	0x52, 0x04, 0x12, 0x0f, 0xe2, 0x74, 0x02, 0x93, 0x42, 0x04,
	0x85, 0x39, 0x82, 0x85, 0x38, 0x83, 0xec, 0xf0, 0x0d, 0x80,
	0xc7, 0x22, 0x78, 0xbe, 0xe6, 0xd3, 0x08, 0xff, 0xe6, 0x64,
	0x80, 0xf8, 0xef, 0x64, 0x80, 0x98, 0x22, 0x93, 0xff, 0x7e,
	0x00, 0xe6, 0xfc, 0x08, 0xe6, 0xfd, 0x12, 0x04, 0xc1, 0x78,
	0xc1, 0xe6, 0xfc, 0x08, 0xe6, 0xfd, 0xd3, 0xef, 0x9d, 0xee,
	0x9c, 0x22, 0x78, 0xbd, 0xd3, 0xe6, 0x64, 0x80, 0x94, 0x80,
	0x22, 0x25, 0xe0, 0x24, 0x0a, 0xf8, 0xe6, 0xfe, 0x08, 0xe6,
	0xff, 0x22, 0xe5, 0x3c, 0xd3, 0x94, 0x00, 0x40, 0x0b, 0x90,
	0x0e, 0x88, 0x12, 0x0b, 0xf1, 0x90, 0x0e, 0x86, 0x80, 0x09,
	0x90, 0x0e, 0x82, 0x12, 0x0b, 0xf1, 0x90, 0x0e, 0x80, 0xe4,
	0x93, 0xf5, 0x44, 0xa3, 0xe4, 0x93, 0xf5, 0x43, 0xd2, 0x06,
	0x30, 0x06, 0x03, 0xd3, 0x80, 0x01, 0xc3, 0x92, 0x0e, 0x22,
	0xa2, 0xaf, 0x92, 0x32, 0xc2, 0xaf, 0xe5, 0x23, 0x45, 0x22,
	0x90, 0x0e, 0x5d, 0x60, 0x0e, 0x12, 0x0f, 0xcb, 0xe0, 0xf5,
	0x2c, 0x12, 0x0f, 0xc8, 0xe0, 0xf5, 0x2d, 0x80, 0x0c, 0x12,
	0x0f, 0xcb, 0xe5, 0x30, 0xf0, 0x12, 0x0f, 0xc8, 0xe5, 0x31,
	0xf0, 0xa2, 0x32, 0x92, 0xaf, 0x22, 0xd2, 0x01, 0xc2, 0x02,
	0xe4, 0xf5, 0x1f, 0xf5, 0x1e, 0xd2, 0x35, 0xd2, 0x33, 0xd2,
	0x36, 0xd2, 0x01, 0xc2, 0x02, 0xf5, 0x1f, 0xf5, 0x1e, 0xd2,
	0x35, 0xd2, 0x33, 0x22, 0xfb, 0xd3, 0xed, 0x9b, 0x74, 0x80,
	0xf8, 0x6c, 0x98, 0x22, 0x12, 0x06, 0x69, 0xe5, 0x40, 0x2f,
	0xf5, 0x40, 0xe5, 0x3f, 0x3e, 0xf5, 0x3f, 0xe5, 0x3e, 0x3d,
	0xf5, 0x3e, 0xe5, 0x3d, 0x3c, 0xf5, 0x3d, 0x22, 0xc0, 0xe0,
	0xc0, 0x83, 0xc0, 0x82, 0x90, 0x3f, 0x0d, 0xe0, 0xf5, 0x33,
	0xe5, 0x33, 0xf0, 0xd0, 0x82, 0xd0, 0x83, 0xd0, 0xe0, 0x32,
	0x90, 0x0e, 0x5f, 0xe4, 0x93, 0xfe, 0x74, 0x01, 0x93, 0xf5,
	0x82, 0x8e, 0x83, 0x22, 0x78, 0x7f, 0xe4, 0xf6, 0xd8, 0xfd,
	0x75, 0x81, 0xcd, 0x02, 0x0c, 0x98, 0x8f, 0x82, 0x8e, 0x83,
	0x75, 0xf0, 0x04, 0xed, 0x02, 0x06, 0xa5,
};

static struct regval post_afc_firmware[] = {
	{ 0x3022, 0x00},
	{ 0x3023, 0x00},
	{ 0x3024, 0x00},
	{ 0x3025, 0x00},
	{ 0x3026, 0x00},
	{ 0x3027, 0x00},
	{ 0x3028, 0x00},
	{ 0x3029, 0x7f},
	{ 0x3000, 0x00},

	{ REG_END, 0x00 },
};

static struct regval fmt_yuv422_720x480[] = {
	{0x3103, 0x11},
	{0x3008, 0x82},
	{0x3008, 0x42},
	{0x3103, 0x03},
	{0x3017, 0xff},
	{0x3018, 0xff},
	{0x3034, 0x1a},
	{0x3035, 0x11},
	{0x3036, 0x46},
	{0x3037, 0x13},
	{0x3108, 0x01},
	{0x3630, 0x36},
	{0x3631, 0x0e},
	{0x3632, 0xe2},
	{0x3633, 0x12},
	{0x3621, 0xe0},
	{0x3704, 0xa0},
	{0x3703, 0x5a},
	{0x3715, 0x78},
	{0x3717, 0x01},
	{0x370b, 0x60},
	{0x3705, 0x1a},
	{0x3905, 0x02},
	{0x3906, 0x10},
	{0x3901, 0x0a},
	{0x3731, 0x12},
	{0x3600, 0x08},
	{0x3601, 0x33},
	{0x302d, 0x60},
	{0x3620, 0x52},
	{0x371b, 0x20},
	{0x471c, 0x50},
	{0x3a13, 0x43},
	{0x3a18, 0x00},
	{0x3a19, 0xf8},
	{0x3635, 0x13},
	{0x3636, 0x03},
	{0x3634, 0x40},
	{0x3622, 0x01},
	{0x3c01, 0x34},
	{0x3c04, 0x28},
	{0x3c05, 0x98},
	{0x3c06, 0x00},
	{0x3c07, 0x08},
	{0x3c08, 0x00},
	{0x3c09, 0x1c},
	{0x3c0a, 0x9c},
	{0x3c0b, 0x40},
	{0x3820, 0x41},
	{0x3821, 0x07},
	{0x3814, 0x31},
	{0x3815, 0x31},
	{0x3800, 0x00},
	{0x3801, 0x00},
	{0x3802, 0x00},
	{0x3803, 0x04},
	{0x3804, 0x0a},
	{0x3805, 0x3f},
	{0x3806, 0x07},
	{0x3807, 0x9b},
	{0x3808, 0x02},
	{0x3809, 0x80},
	{0x380a, 0x01},
	{0x380b, 0xe0},
	{0x380c, 0x07},
	{0x380d, 0x68},
	{0x380e, 0x03},
	{0x380f, 0xd8},
	{0x3810, 0x00},
	{0x3811, 0x10},
	{0x3812, 0x00},
	{0x3813, 0x06},
	{0x3618, 0x00},
	{0x3612, 0x29},
	{0x3708, 0x64},
	{0x3709, 0x52},
	{0x370c, 0x03},
	{0x3a02, 0x03},
	{0x3a03, 0xd8},
	{0x3a08, 0x01},
	{0x3a09, 0x27},
	{0x3a0a, 0x00},
	{0x3a0b, 0xf6},
	{0x3a0e, 0x03},
	{0x3a0d, 0x04},
	{0x3a14, 0x03},
	{0x3a15, 0xd8},
	{0x4001, 0x02},
	{0x4004, 0x02},
	{0x3000, 0x00},
	{0x3002, 0x1c},
	{0x3004, 0xff},
	{0x3006, 0xc3},
	{0x300e, 0x58},
	{0x302e, 0x00},
	{0x4300, 0x30},
	{0x501f, 0x00},
	{0x4713, 0x03},
	{0x4407, 0x04},
	{0x440e, 0x00},
	{0x460b, 0x35},
	{0x460c, 0x22},
	{0x4837, 0x22},
	{0x3824, 0x02},
	{0x5000, 0xa7},
	{0x5001, 0xa3},
	{0x5180, 0xff},
	{0x5181, 0xf2},
	{0x5182, 0x00},
	{0x5183, 0x14},
	{0x5184, 0x25},
	{0x5185, 0x24},
	{0x5186, 0x09},
	{0x5187, 0x09},
	{0x5188, 0x09},
	{0x5189, 0x75},
	{0x518a, 0x54},
	{0x518b, 0xe0},
	{0x518c, 0xb2},
	{0x518d, 0x42},
	{0x518e, 0x3d},
	{0x518f, 0x56},
	{0x5190, 0x46},
	{0x5191, 0xf8},
	{0x5192, 0x04},
	{0x5193, 0x70},
	{0x5194, 0xf0},
	{0x5195, 0xf0},
	{0x5196, 0x03},
	{0x5197, 0x01},
	{0x5198, 0x04},
	{0x5199, 0x12},
	{0x519a, 0x04},
	{0x519b, 0x00},
	{0x519c, 0x06},
	{0x519d, 0x82},
	{0x519e, 0x38},
	{0x5381, 0x1e},
	{0x5382, 0x5b},
	{0x5383, 0x08},
	{0x5384, 0x0a},
	{0x5385, 0x7e},
	{0x5386, 0x88},
	{0x5387, 0x7c},
	{0x5388, 0x6c},
	{0x5389, 0x10},
	{0x538a, 0x01},
	{0x538b, 0x98},
	{0x5300, 0x08},
	{0x5301, 0x30},
	{0x5302, 0x10},
	{0x5303, 0x00},
	{0x5304, 0x08},
	{0x5305, 0x30},
	{0x5306, 0x08},
	{0x5307, 0x16},
	{0x5309, 0x08},
	{0x530a, 0x30},
	{0x530b, 0x04},
	{0x530c, 0x06},
	{0x5480, 0x01},
	{0x5481, 0x08},
	{0x5482, 0x14},
	{0x5483, 0x28},
	{0x5484, 0x51},
	{0x5485, 0x65},
	{0x5486, 0x71},
	{0x5487, 0x7d},
	{0x5488, 0x87},
	{0x5489, 0x91},
	{0x548a, 0x9a},
	{0x548b, 0xaa},
	{0x548c, 0xb8},
	{0x548d, 0xcd},
	{0x548e, 0xdd},
	{0x548f, 0xea},
	{0x5490, 0x1d},
	{0x5580, 0x02},
	{0x5583, 0x40},
	{0x5584, 0x10},
	{0x5589, 0x10},
	{0x558a, 0x00},
	{0x558b, 0xf8},
	{0x5800, 0x23},
	{0x5801, 0x14},
	{0x5802, 0x0f},
	{0x5803, 0x0f},
	{0x5804, 0x12},
	{0x5805, 0x26},
	{0x5806, 0x0c},
	{0x5807, 0x08},
	{0x5808, 0x05},
	{0x5809, 0x05},
	{0x580a, 0x08},
	{0x580b, 0x0d},
	{0x580c, 0x08},
	{0x580d, 0x03},
	{0x580e, 0x00},
	{0x580f, 0x00},
	{0x5810, 0x03},
	{0x5811, 0x09},
	{0x5812, 0x07},
	{0x5813, 0x03},
	{0x5814, 0x00},
	{0x5815, 0x01},
	{0x5816, 0x03},
	{0x5817, 0x08},
	{0x5818, 0x0d},
	{0x5819, 0x08},
	{0x581a, 0x05},
	{0x581b, 0x06},
	{0x581c, 0x08},
	{0x581d, 0x0e},
	{0x581e, 0x29},
	{0x581f, 0x17},
	{0x5820, 0x11},
	{0x5821, 0x11},
	{0x5822, 0x15},
	{0x5823, 0x28},
	{0x5824, 0x46},
	{0x5825, 0x26},
	{0x5826, 0x08},
	{0x5827, 0x26},
	{0x5828, 0x64},
	{0x5829, 0x26},
	{0x582a, 0x24},
	{0x582b, 0x22},
	{0x582c, 0x24},
	{0x582d, 0x24},
	{0x582e, 0x06},
	{0x582f, 0x22},
	{0x5830, 0x40},
	{0x5831, 0x42},
	{0x5832, 0x24},
	{0x5833, 0x26},
	{0x5834, 0x24},
	{0x5835, 0x22},
	{0x5836, 0x22},
	{0x5837, 0x26},
	{0x5838, 0x44},
	{0x5839, 0x24},
	{0x583a, 0x26},
	{0x583b, 0x28},
	{0x583c, 0x42},
	{0x583d, 0xce},
	{0x5025, 0x00},
	{0x3a0f, 0x30},
	{0x3a10, 0x28},
	{0x3a1b, 0x30},
	{0x3a1e, 0x26},
	{0x3a11, 0x60},
	{0x3a1f, 0x14},
	{0x3008, 0x02},
	{0x3035, 0x21},
	{0x3808, 0x02},
	{0x3809, 0xd0},
	{0x380a, 0x01},
	{0x380b, 0xe0},
	{0x3824, 0x01},
	{0x3035, 0x51},
	{0x380c, 0x07},
	{0x380d, 0x68},
	{0x380e, 0x03},
	{0x380f, 0xd8},
	{0x3806, 0x06},
	{0x3807, 0x6a},

	{ REG_END, 0x00 },
};

static struct regval fmt_yuv422_720x480_[] = {
	// YUV VGA 30fps, night mode 5fps
	// Input Clock = 24Mhz, PCLK = 56MHz
	{ 0x3035, 0x11 }, // PLL
	{ 0x3036, 0x46 }, // PLL
	{ 0x3c07, 0x08 }, // light meter 1 threshold [7:0]
	{ 0x3820, 0x41 }, // Sensor flip off, ISP flip on
	{ 0x3821, 0x07 }, // Sensor mirror on, ISP mirror on, H binning on
	{ 0x3814, 0x31 }, // X INC
	{ 0x3815, 0x31 }, // Y INC
	{ 0x3800, 0x00 }, // HS
	{ 0x3801, 0x00 }, // HS
	{ 0x3802, 0x00 }, // VS
	{ 0x3803, 0x04 }, // VS
	{ 0x3804, 0x0a }, // HW (HE)
	{ 0x3805, 0x3f }, // HW (HE)
	{ 0x3806, 0x07 }, // VH (VE)
	{ 0x3807, 0x9b }, // VH (VE)
	{ 0x3808, 0x02 }, // DVPHO
	{ 0x3809, 0x80 }, // DVPHO
	{ 0x380a, 0x01 }, // DVPVO
	{ 0x380b, 0xe0 }, // DVPVO
	{ 0x380c, 0x07 }, // HTS
	{ 0x380d, 0x68 }, // HTS
	{ 0x380e, 0x03 }, // VTS
	{ 0x380f, 0xd8 }, // VTS
	{ 0x3813, 0x06 }, // Timing Voffset
	{ 0x3618, 0x00 },
	{ 0x3612, 0x29 },
	{ 0x3709, 0x52 },
	{ 0x370c, 0x03 },
	{ 0x3a02, 0x17 }, // 60Hz max exposure, night mode 5fps
	{ 0x3a03, 0x10 }, // 60Hz max exposure
	// banding filters are calculated automatically in camera driver
	//{ 0x3a08, 0x01 }, // B50 step
	//{ 0x3a09, 0x27 }, // B50 step
	//{ 0x3a0a, 0x00 }, // B60 step
	//{ 0x3a0b, 0xf6 }, // B60 step
	//{ 0x3a0e, 0x03 }, // 50Hz max band
	//{ 0x3a0d, 0x04 }, // 60Hz max band
	{ 0x3a14, 0x17 }, // 50Hz max exposure, night mode 5fps
	{ 0x3a15, 0x10 }, // 50Hz max exposure
	{ 0x4004, 0x02 }, // BLC 2 lines
	{ 0x3002, 0x1c }, // reset JFIFO, SFIFO, JPEG
	{ 0x3006, 0xc3 }, // disable clock of JPEG2x, JPEG
	{ 0x4713, 0x03 }, // JPEG mode 3
	{ 0x4407, 0x04 }, // Quantization scale
	{ 0x460b, 0x35 },
	{ 0x460c, 0x22 },
	{ 0x4837, 0x22 }, // DVP CLK divider
	{ 0x3824, 0x02 }, // DVP CLK divider
	{ 0x5001, 0xa3 }, // SDE on, scale on, UV average off, color matrix on, AWB on
	{ 0x3503, 0x00 }, // AEC/AGC on

	//vga to 720*480
	{0x3808, 0x02},
	{0x3809, 0xd0},
	{0x380a, 0x01},
	{0x380b, 0xe0},
	{0x3824, 0x01},
	{0x3035, 0x51},
	{0x380c, 0x07},
	{0x380d, 0x68},
	{0x380e, 0x03},
	{0x380f, 0xd8},
	{0x3806, 0x06},
	{0x3807, 0x6a},

	{ REG_END, 0x00 },
};

static struct regval fmt_yuv422_1024x768_[] = {
	// FROM VGA
	{ 0x3035, 0x11 }, // PLL
	{ 0x3036, 0x46 }, // PLL
	{ 0x3c07, 0x08 }, // light meter 1 threshold [7:0]
	{ 0x3820, 0x41 }, // Sensor flip off, ISP flip on
	{ 0x3821, 0x07 }, // Sensor mirror on, ISP mirror on, H binning on
	{ 0x3814, 0x31 }, // X INC
	{ 0x3815, 0x31 }, // Y INC
	{ 0x3800, 0x00 }, // HS
	{ 0x3801, 0x00 }, // HS
	{ 0x3802, 0x00 }, // VS
	{ 0x3803, 0x04 }, // VS
	{ 0x3804, 0x0a }, // HW (HE)
	{ 0x3805, 0x3f }, // HW (HE)
	{ 0x3806, 0x07 }, // VH (VE)
	{ 0x3807, 0x9b }, // VH (VE)
	{ 0x3808, 0x02 }, // DVPHO
	{ 0x3809, 0x80 }, // DVPHO
	{ 0x380a, 0x01 }, // DVPVO
	{ 0x380b, 0xe0 }, // DVPVO
	{ 0x380c, 0x07 }, // HTS
	{ 0x380d, 0x68 }, // HTS
	{ 0x380e, 0x03 }, // VTS
	{ 0x380f, 0xd8 }, // VTS
	{ 0x3813, 0x06 }, // Timing Voffset
	{ 0x3618, 0x00 },
	{ 0x3612, 0x29 },
	{ 0x3709, 0x52 },
	{ 0x370c, 0x03 },
	{ 0x3a02, 0x17 }, // 60Hz max exposure, night mode 5fps
	{ 0x3a03, 0x10 }, // 60Hz max exposure
	// banding filters are calculated automatically in camera driver
	//{ 0x3a08, 0x01 }, // B50 step
	//{ 0x3a09, 0x27 }, // B50 step
	//{ 0x3a0a, 0x00 }, // B60 step
	//{ 0x3a0b, 0xf6 }, // B60 step
	//{ 0x3a0e, 0x03 }, // 50Hz max band
	//{ 0x3a0d, 0x04 }, // 60Hz max band
	{ 0x3a14, 0x17 }, // 50Hz max exposure, night mode 5fps
	{ 0x3a15, 0x10 }, // 50Hz max exposure
	{ 0x4004, 0x02 }, // BLC 2 lines
	{ 0x3002, 0x1c }, // reset JFIFO, SFIFO, JPEG
	{ 0x3006, 0xc3 }, // disable clock of JPEG2x, JPEG
	{ 0x4713, 0x03 }, // JPEG mode 3
	{ 0x4407, 0x04 }, // Quantization scale
	{ 0x460b, 0x35 },
	{ 0x460c, 0x22 },
	{ 0x4837, 0x22 }, // DVP CLK divider
	{ 0x3824, 0x02 }, // DVP CLK divider
	{ 0x5001, 0xa3 }, // SDE on, scale on, UV average off, color matrix on, AWB on
	{ 0x3503, 0x00 }, // AEC/AGC on

	//TO 1024x768
	{0x3808, 0x04},
	{0x3809, 0x00},
	{0x380a, 0x03},
	{0x380b, 0x00},
	{0x3824, 0x01},
	{0x3035, 0x21},
	{0x380c, 0x07},
	{0x380d, 0x68},
	{0x380e, 0x03},
	{0x380f, 0xd8},
	{0x3806, 0x07},
	{0x3807, 0x9b},

	{ REG_END, 0x00 },
};

static struct regval fmt_yuv422_176x144[] = {
	// YUV 176x144 30fps, night mode 5fps
	// Input Clock = 24Mhz, PCLK = 56MHz
	{ 0x3035, 0x11 }, // PLL
	{ 0x3036, 0x46 }, // PLL
	{ 0x3c07, 0x08 }, // light meter 1 threshold [7:0]
	{ 0x3820, 0x41 }, // Sensor flip off, ISP flip on
	{ 0x3821, 0x07 }, // Sensor mirror on, ISP mirror on, H binning on
	{ 0x3814, 0x31 }, // X INC
	{ 0x3815, 0x31 }, // Y INC
	{ 0x3800, 0x00 }, // HS
	{ 0x3801, 0x00 }, // HS
	{ 0x3802, 0x00 }, // VS
	{ 0x3803, 0x04 }, // VS
	{ 0x3804, 0x0a }, // HW (HE)
	{ 0x3805, 0x3f }, // HW (HE)
	{ 0x3806, 0x07 }, // VH (VE)
	{ 0x3807, 0x9b }, // VH (VE)
//	{ 0x3808, 0x02 }, // DVPHO
//	{ 0x3809, 0x80 }, // DVPHO
//	{ 0x380a, 0x01 }, // DVPVO
//	{ 0x380b, 0xe0 }, // DVPVO
	{ 0x3808, 0x00 }, // DVPHO
	{ 0x3809, 0xb0 }, // DVPHO
	{ 0x380a, 0x00 }, // DVPVO
	{ 0x380b, 0x90 }, // DVPVO
	{ 0x380c, 0x07 }, // HTS
	{ 0x380d, 0x68 }, // HTS
	{ 0x380e, 0x03 }, // VTS
	{ 0x380f, 0xd8 }, // VTS
	{ 0x3813, 0x06 }, // Timing Voffset
	{ 0x3618, 0x00 },
	{ 0x3612, 0x29 },
	{ 0x3709, 0x52 },
	{ 0x370c, 0x03 },
	{ 0x3a02, 0x17 }, // 60Hz max exposure, night mode 5fps
	{ 0x3a03, 0x10 }, // 60Hz max exposure
	// banding filters are calculated automatically in camera driver
	//{ 0x3a08, 0x01 }, // B50 step
	//{ 0x3a09, 0x27 }, // B50 step
	//{ 0x3a0a, 0x00 }, // B60 step
	//{ 0x3a0b, 0xf6 }, // B60 step
	//{ 0x3a0e, 0x03 }, // 50Hz max band
	//{ 0x3a0d, 0x04 }, // 60Hz max band
	{ 0x3a14, 0x17 }, // 50Hz max exposure, night mode 5fps
	{ 0x3a15, 0x10 }, // 50Hz max exposure
	{ 0x4004, 0x02 }, // BLC 2 lines
	{ 0x3002, 0x1c }, // reset JFIFO, SFIFO, JPEG
	{ 0x3006, 0xc3 }, // disable clock of JPEG2x, JPEG
	{ 0x4713, 0x03 }, // JPEG mode 3
	{ 0x4407, 0x04 }, // Quantization scale
	{ 0x460b, 0x35 },
	{ 0x460c, 0x22 },
	{ 0x4837, 0x22 }, // DVP CLK divider
	{ 0x3824, 0x02 }, // DVP CLK divider
	{ 0x5001, 0xa3 }, // SDE on, scale on, UV average off, color matrix on, AWB on
	{ 0x3503, 0x00 }, // AEC/AGC on

	{ REG_END, 0x00 },
};

static struct regval fmt_yuv422_320x240[] = {
	// YUV 320x240 30fps, night mode 5fps
	// Input Clock = 24Mhz, PCLK = 56MHz
	{ 0x3035, 0x11 }, // PLL
	{ 0x3036, 0x46 }, // PLL
	{ 0x3c07, 0x08 }, // light meter 1 threshold [7:0]
	{ 0x3820, 0x41 }, // Sensor flip off, ISP flip on
	{ 0x3821, 0x07 }, // Sensor mirror on, ISP mirror on, H binning on
	{ 0x3814, 0x31 }, // X INC
	{ 0x3815, 0x31 }, // Y INC
	{ 0x3800, 0x00 }, // HS
	{ 0x3801, 0x00 }, // HS
	{ 0x3802, 0x00 }, // VS
	{ 0x3803, 0x04 }, // VS
	{ 0x3804, 0x0a }, // HW (HE)
	{ 0x3805, 0x3f }, // HW (HE)
	{ 0x3806, 0x07 }, // VH (VE)
	{ 0x3807, 0x9b }, // VH (VE)
	{ 0x3808, 0x01 }, // DVPHO
	{ 0x3809, 0x40 }, // DVPHO
	{ 0x380a, 0x00 }, // DVPVO
	{ 0x380b, 0xf0 }, // DVPVO
	{ 0x380c, 0x07 }, // HTS
	{ 0x380d, 0x68 }, // HTS
	{ 0x380e, 0x03 }, // VTS
	{ 0x380f, 0xd8 }, // VTS
	{ 0x3813, 0x06 }, // Timing Voffset
	{ 0x3618, 0x00 },
	{ 0x3612, 0x29 },
	{ 0x3709, 0x52 },
	{ 0x370c, 0x03 },
	{ 0x3a02, 0x17 }, // 60Hz max exposure, night mode 5fps
	{ 0x3a03, 0x10 }, // 60Hz max exposure
	// banding filters are calculated automatically in camera driver
	//{ 0x3a08, 0x01 }, // B50 step
	//{ 0x3a09, 0x27 }, // B50 step
	//{ 0x3a0a, 0x00 }, // B60 step
	//{ 0x3a0b, 0xf6 }, // B60 step
	//{ 0x3a0e, 0x03 }, // 50Hz max band
	//{ 0x3a0d, 0x04 }, // 60Hz max band
	{ 0x3a14, 0x17 }, // 50Hz max exposure, night mode 5fps
	{ 0x3a15, 0x10 }, // 50Hz max exposure
	{ 0x4004, 0x02 }, // BLC 2 lines
	{ 0x3002, 0x1c }, // reset JFIFO, SFIFO, JPEG
	{ 0x3006, 0xc3 }, // disable clock of JPEG2x, JPEG
	{ 0x4713, 0x03 }, // JPEG mode 3
	{ 0x4407, 0x04 }, // Quantization scale
	{ 0x460b, 0x35 },
	{ 0x460c, 0x22 },
	{ 0x4837, 0x22 }, // DVP CLK divider
	{ 0x3824, 0x02 }, // DVP CLK divider
	{ 0x5001, 0xa3 }, // SDE on, scale on, UV average off, color matrix on, AWB on
	{ 0x3503, 0x00 }, // AEC/AGC on

	{ REG_END, 0x00 },
};

static struct regval fmt_yuv422_352x288[] = {
	// YUV 352x288 30fps, night mode 5fps
	// Input Clock = 24Mhz, PCLK = 56MHz
	{ 0x3035, 0x11 }, // PLL
	{ 0x3036, 0x46 }, // PLL
	{ 0x3c07, 0x08 }, // light meter 1 threshold [7:0]
	{ 0x3820, 0x41 }, // Sensor flip off, ISP flip on
	{ 0x3821, 0x07 }, // Sensor mirror on, ISP mirror on, H binning on
	{ 0x3814, 0x31 }, // X INC
	{ 0x3815, 0x31 }, // Y INC
	{ 0x3800, 0x00 }, // HS
	{ 0x3801, 0x00 }, // HS
	{ 0x3802, 0x00 }, // VS
	{ 0x3803, 0x04 }, // VS
	{ 0x3804, 0x0a }, // HW (HE)
	{ 0x3805, 0x3f }, // HW (HE)
	{ 0x3806, 0x07 }, // VH (VE)
	{ 0x3807, 0x9b }, // VH (VE)
	{ 0x3808, 0x01 }, // DVPHO
	{ 0x3809, 0x60 }, // DVPHO
	{ 0x380a, 0x01 }, // DVPVO
	{ 0x380b, 0x20 }, // DVPVO
	{ 0x380c, 0x07 }, // HTS
	{ 0x380d, 0x68 }, // HTS
	{ 0x380e, 0x03 }, // VTS
	{ 0x380f, 0xd8 }, // VTS
	{ 0x3813, 0x06 }, // Timing Voffset
	{ 0x3618, 0x00 },
	{ 0x3612, 0x29 },
	{ 0x3709, 0x52 },
	{ 0x370c, 0x03 },
	{ 0x3a02, 0x17 }, // 60Hz max exposure, night mode 5fps
	{ 0x3a03, 0x10 }, // 60Hz max exposure
	// banding filters are calculated automatically in camera driver
	//{ 0x3a08, 0x01 }, // B50 step
	//{ 0x3a09, 0x27 }, // B50 step
	//{ 0x3a0a, 0x00 }, // B60 step
	//{ 0x3a0b, 0xf6 }, // B60 step
	//{ 0x3a0e, 0x03 }, // 50Hz max band
	//{ 0x3a0d, 0x04 }, // 60Hz max band
	{ 0x3a14, 0x17 }, // 50Hz max exposure, night mode 5fps
	{ 0x3a15, 0x10 }, // 50Hz max exposure
	{ 0x4004, 0x02 }, // BLC 2 lines
	{ 0x3002, 0x1c }, // reset JFIFO, SFIFO, JPEG
	{ 0x3006, 0xc3 }, // disable clock of JPEG2x, JPEG
	{ 0x4713, 0x03 }, // JPEG mode 3
	{ 0x4407, 0x04 }, // Quantization scale
	{ 0x460b, 0x35 },
	{ 0x460c, 0x22 },
	{ 0x4837, 0x22 }, // DVP CLK divider
	{ 0x3824, 0x02 }, // DVP CLK divider
	{ 0x5001, 0xa3 }, // SDE on, scale on, UV average off, color matrix on, AWB on
	{ 0x3503, 0x00 }, // AEC/AGC on

	{ REG_END, 0x00 },
};

static struct regval fmt_yuv422_vga[] = {
	// YUV VGA 30fps, night mode 5fps
	// Input Clock = 24Mhz, PCLK = 56MHz
	{ 0x3035, 0x11 }, // PLL
	{ 0x3036, 0x46 }, // PLL
//	{ 0x3036, 0x30 }, // PLL 38MHz
	{ 0x3c07, 0x08 }, // light meter 1 threshold [7:0]
	{ 0x3820, 0x41 }, // Sensor flip off, ISP flip on
	{ 0x3821, 0x07 }, // Sensor mirror on, ISP mirror on, H binning on
	{ 0x3814, 0x31 }, // X INC
	{ 0x3815, 0x31 }, // Y INC
	{ 0x3800, 0x00 }, // HS
	{ 0x3801, 0x00 }, // HS
	{ 0x3802, 0x00 }, // VS
	{ 0x3803, 0x04 }, // VS
	{ 0x3804, 0x0a }, // HW (HE)
	{ 0x3805, 0x3f }, // HW (HE)
	{ 0x3806, 0x07 }, // VH (VE)
	{ 0x3807, 0x9b }, // VH (VE)
	{ 0x3808, 0x02 }, // DVPHO
	{ 0x3809, 0x80 }, // DVPHO
	{ 0x380a, 0x01 }, // DVPVO
	{ 0x380b, 0xe0 }, // DVPVO
	{ 0x380c, 0x07 }, // HTS
	{ 0x380d, 0x68 }, // HTS
	{ 0x380e, 0x03 }, // VTS
	{ 0x380f, 0xd8 }, // VTS
	{ 0x3813, 0x06 }, // Timing Voffset
	{ 0x3618, 0x00 },
	{ 0x3612, 0x29 },
	{ 0x3709, 0x52 },
	{ 0x370c, 0x03 },
	{ 0x3a02, 0x17 }, // 60Hz max exposure, night mode 5fps
	{ 0x3a03, 0x10 }, // 60Hz max exposure
	// banding filters are calculated automatically in camera driver
	//{ 0x3a08, 0x01 }, // B50 step
	//{ 0x3a09, 0x27 }, // B50 step
	//{ 0x3a0a, 0x00 }, // B60 step
	//{ 0x3a0b, 0xf6 }, // B60 step
	//{ 0x3a0e, 0x03 }, // 50Hz max band
	//{ 0x3a0d, 0x04 }, // 60Hz max band
	{ 0x3a14, 0x17 }, // 50Hz max exposure, night mode 5fps
	{ 0x3a15, 0x10 }, // 50Hz max exposure
	{ 0x4004, 0x02 }, // BLC 2 lines
	{ 0x3002, 0x1c }, // reset JFIFO, SFIFO, JPEG
	{ 0x3006, 0xc3 }, // disable clock of JPEG2x, JPEG
	{ 0x4713, 0x03 }, // JPEG mode 3
	{ 0x4407, 0x04 }, // Quantization scale
	{ 0x460b, 0x35 },
	{ 0x460c, 0x22 },
	{ 0x4837, 0x22 }, // DVP CLK divider
	{ 0x3824, 0x02 }, // DVP CLK divider
	{ 0x5001, 0xa3 }, // SDE on, scale on, UV average off, color matrix on, AWB on
	{ 0x3503, 0x00 }, // AEC/AGC on

	{ REG_END, 0x00 },
};

static struct regval fmt_yuv422_720p[] = {
	// 1280x720, 30fps
	// input clock 24Mhz, PCLK 84Mhz
	{ 0x3035, 0x21 }, // PLL
	{ 0x3036, 0x69 }, // PLL
//	{ 0x3036, 0x58 }, // PLL
	{ 0x3c07, 0x07 }, // lightmeter 1 threshold[7:0]
	{ 0x3820, 0x41 }, // flip
	{ 0x3821, 0x07 }, // mirror
	{ 0x3814, 0x31 }, // timing X inc
	{ 0x3815, 0x31 }, // timing Y inc
	{ 0x3800, 0x00 }, // HS
	{ 0x3801, 0x00 }, // HS
	{ 0x3802, 0x00 }, // VS
	{ 0x3803, 0xfa }, // VS
	{ 0x3804, 0x0a }, // HW (HE)
	{ 0x3805, 0x3f }, // HW (HE)
	{ 0x3806, 0x06 }, // VH (VE)
	{ 0x3807, 0xa9 }, // VH (VE)
	{ 0x3808, 0x05 }, // DVPHO
	{ 0x3809, 0x00 }, // DVPHO
	{ 0x380a, 0x02 }, // DVPVO
	{ 0x380b, 0xd0 }, // DVPVO
	{ 0x380c, 0x07 }, // HTS
	{ 0x380d, 0x64 }, // HTS
	{ 0x380e, 0x02 }, // VTS
	{ 0x380f, 0xe4 }, // VTS
	{ 0x3813, 0x04 }, // timing V offset
	{ 0x3618, 0x00 },
	{ 0x3612, 0x29 },
	{ 0x3709, 0x52 },
	{ 0x370c, 0x03 },
	{ 0x3a02, 0x02 }, // 60Hz max exposure
	{ 0x3a03, 0xe0 }, // 60Hz max exposure
	// banding filters are calculated automatically in camera driver
	//{ 0x3a08, 0x00 }, // B50 step
	//{ 0x3a09, 0x6f }, // B50 step
	//{ 0x3a0a, 0x00 }, // B60 step
	//{ 0x3a0b, 0x5c }, // B60 step
	//{ 0x3a0e, 0x06 }, // 50Hz max band
	//{ 0x3a0d, 0x08 }, // 60Hz max band
	{ 0x3a14, 0x02 }, // 50Hz max exposure
	{ 0x3a15, 0xe0 }, // 50Hz max exposure
	{ 0x4004, 0x02 }, // BLC line number
	{ 0x3002, 0x1c }, // reset JFIFO, SFIFO, JPG
	{ 0x3006, 0xc3 }, // disable clock of JPEG2x, JPEG
	{ 0x4713, 0x03 }, // JPEG mode 3
	{ 0x4407, 0x04 }, // Quantization scale
	{ 0x460b, 0x37 },
	{ 0x460c, 0x20 },
	{ 0x4837, 0x16 }, // MIPI global timing
	{ 0x3824, 0x04 }, // PCLK manual divider
	{ 0x5001, 0x83 }, // SDE on, CMX
	{ 0x3503, 0x00 }, // AEC/AGC on

	{ REG_END, 0x00 },
};

static struct regval fmt_yuv422_720p_30fps[] = {
	{ 0x3035, 0x21 }, // PLL

	{ REG_END, 0x00 },
};

static struct regval fmt_yuv422_720p_15fps[] = {
	{ 0x3035, 0x41 }, // PLL

	{ REG_END, 0x00 },
};

static struct regval fmt_yuv422_1024x768[] = {
	// YUV 1024x768, 7.5fps
	// input clock 24Mhz, PCLK 84Mhz
	{ 0x3035, 0x21 }, // PLL
	{ 0x3036, 0x69 }, // PLL
	{ 0x3c07, 0x07 }, // lightm eter 1 threshold[7:0]
	{ 0x3820, 0x40 }, // flip
	{ 0x3821, 0x06 }, // mirror
	{ 0x3814, 0x11 }, // timing X inc
	{ 0x3815, 0x11 }, // timing Y inc
	{ 0x3800, 0x00 }, // HS
	{ 0x3801, 0x00 }, // HS
	{ 0x3802, 0x00 }, // VS
	{ 0x3803, 0x00 }, // VS
	{ 0x3804, 0x0a }, // HW (HE)
	{ 0x3805, 0x3f }, // HW (HE)
	{ 0x3806, 0x07 }, // VH (VE)
	{ 0x3807, 0x9f }, // VH (VE)
	{ 0x3808, 0x04 }, // DVPHO
	{ 0x3809, 0x00 }, // DVPHO
	{ 0x380a, 0x03 }, // DVPVO
	{ 0x380b, 0x00 }, // DVPVO
	{ 0x380c, 0x0b }, // HTS
	{ 0x380d, 0x1c }, // HTS
	{ 0x380e, 0x07 }, // VTS
	{ 0x380f, 0xb0 }, // VTS
	{ 0x3813, 0x04 }, // timing V offset
	{ 0x3618, 0x04 },
	{ 0x3612, 0x2b },
	{ 0x3709, 0x12 },
	{ 0x370c, 0x00 },
	// banding filters are calculated automatically in camera driver
	//{ 0x3a02, 0x07 }, // 60Hz max exposure
	//{ 0x3a03, 0xae }, // 60Hz max exposure
	//{ 0x3a08, 0x01 }, // B50 step
	//{ 0x3a09, 0x27 }, // B50 step
	//{ 0x3a0a, 0x00 }, // B60 step
	//{ 0x3a0b, 0xf6 }, // B60 step
	//{ 0x3a0e, 0x06 }, // 50Hz max band
	//{ 0x3a0d, 0x08 }, // 60Hz max band
	//{ 0x3a14, 0x07 }, // 50Hz max exposure
	//{ 0x3a15, 0xae }, // 50Hz max exposure
	{ 0x4004, 0x06 }, // BLC line number
	{ 0x3002, 0x1c }, // reset JFIFO, SFIFO, JPG
	{ 0x3006, 0xc3 }, // disable clock of JPEG2x, JPEG
	{ 0x4713, 0x02 }, // JPEG mode 3
	{ 0x4407, 0x0c }, // Quantization sacle
	{ 0x460b, 0x37 },
	{ 0x460c, 0x20 },
	{ 0x4837, 0x2c }, // MIPI global timing
	{ 0x3824, 0x01 }, // PCLK manual divider
	{ 0x5001, 0xa3 }, // SDE on, CMX on, AWB on
	{ 0x3503, 0x00 },

	{ REG_END, 0x00 },
};

static struct regval fmt_yuv422_1280x960[] = {
	// YUV 1280x960, 7.5fps
	// input clock 24Mhz, PCLK 84Mhz
	{ 0x3035, 0x21 }, // PLL
	{ 0x3036, 0x69 }, // PLL
	{ 0x3c07, 0x07 }, // lightm eter 1 threshold[7:0]
	{ 0x3820, 0x40 }, // flip
	{ 0x3821, 0x06 }, // mirror
	{ 0x3814, 0x11 }, // timing X inc
	{ 0x3815, 0x11 }, // timing Y inc
	{ 0x3800, 0x00 }, // HS
	{ 0x3801, 0x00 }, // HS
	{ 0x3802, 0x00 }, // VS
	{ 0x3803, 0x00 }, // VS
	{ 0x3804, 0x0a }, // HW (HE)
	{ 0x3805, 0x3f }, // HW (HE)
	{ 0x3806, 0x07 }, // VH (VE)
	{ 0x3807, 0x9f }, // VH (VE)
	{ 0x3808, 0x05 }, // DVPHO
	{ 0x3809, 0x00 }, // DVPHO
	{ 0x380a, 0x03 }, // DVPVO
	{ 0x380b, 0xc0 }, // DVPVO
	{ 0x380c, 0x0b }, // HTS
	{ 0x380d, 0x1c }, // HTS
	{ 0x380e, 0x07 }, // VTS
	{ 0x380f, 0xb0 }, // VTS
	{ 0x3813, 0x04 }, // timing V offset
	{ 0x3618, 0x04 },
	{ 0x3612, 0x2b },
	{ 0x3709, 0x12 },
	{ 0x370c, 0x00 },
	// banding filters are calculated automatically in camera driver
	//{ 0x3a02, 0x07 }, // 60Hz max exposure
	//{ 0x3a03, 0xae }, // 60Hz max exposure
	//{ 0x3a08, 0x01 }, // B50 step
	//{ 0x3a09, 0x27 }, // B50 step
	//{ 0x3a0a, 0x00 }, // B60 step
	//{ 0x3a0b, 0xf6 }, // B60 step
	//{ 0x3a0e, 0x06 }, // 50Hz max band
	//{ 0x3a0d, 0x08 }, // 60Hz max band
	//{ 0x3a14, 0x07 }, // 50Hz max exposure
	//{ 0x3a15, 0xae }, // 50Hz max exposure
	{ 0x4004, 0x06 }, // BLC line number
	{ 0x3002, 0x1c }, // reset JFIFO, SFIFO, JPG
	{ 0x3006, 0xc3 }, // disable clock of JPEG2x, JPEG
	{ 0x4713, 0x02 }, // JPEG mode 3
	{ 0x4407, 0x0c }, // Quantization sacle
	{ 0x460b, 0x37 },
	{ 0x460c, 0x20 },
	{ 0x4837, 0x2c }, // MIPI global timing
	{ 0x3824, 0x01 }, // PCLK manual divider
	{ 0x5001, 0xa3 }, // SDE on, CMX on, AWB on
	{ 0x3503, 0x00 },

	{ REG_END, 0x00 },
};

static struct regval fmt_yuv422_1600x1200[] = {
	// YUV 1600x1200, 7.5fps
	// input clock 24Mhz, PCLK 84Mhz
	{ 0x3035, 0x21 }, // PLL
	{ 0x3036, 0x69 }, // PLL
	{ 0x3c07, 0x07 }, // lightm eter 1 threshold[7:0]
	{ 0x3820, 0x40 }, // flip
	{ 0x3821, 0x06 }, // mirror
	{ 0x3814, 0x11 }, // timing X inc
	{ 0x3815, 0x11 }, // timing Y inc
	{ 0x3800, 0x00 }, // HS
	{ 0x3801, 0x00 }, // HS
	{ 0x3802, 0x00 }, // VS
	{ 0x3803, 0x00 }, // VS
	{ 0x3804, 0x0a }, // HW (HE)
	{ 0x3805, 0x3f }, // HW (HE)
	{ 0x3806, 0x07 }, // VH (VE)
	{ 0x3807, 0x9f }, // VH (VE)
	{ 0x3808, 0x06 }, // DVPHO
	{ 0x3809, 0x40 }, // DVPHO
	{ 0x380a, 0x04 }, // DVPVO
	{ 0x380b, 0xb0 }, // DVPVO
	{ 0x380c, 0x0b }, // HTS
	{ 0x380d, 0x1c }, // HTS
	{ 0x380e, 0x07 }, // VTS
	{ 0x380f, 0xb0 }, // VTS
	{ 0x3813, 0x04 }, // timing V offset
	{ 0x3618, 0x04 },
	{ 0x3612, 0x2b },
	{ 0x3709, 0x12 },
	{ 0x370c, 0x00 },
	// banding filters are calculated automatically in camera driver
	//{ 0x3a02, 0x07 }, // 60Hz max exposure
	//{ 0x3a03, 0xae }, // 60Hz max exposure
	//{ 0x3a08, 0x01 }, // B50 step
	//{ 0x3a09, 0x27 }, // B50 step
	//{ 0x3a0a, 0x00 }, // B60 step
	//{ 0x3a0b, 0xf6 }, // B60 step
	//{ 0x3a0e, 0x06 }, // 50Hz max band
	//{ 0x3a0d, 0x08 }, // 60Hz max band
	//{ 0x3a14, 0x07 }, // 50Hz max exposure
	//{ 0x3a15, 0xae }, // 50Hz max exposure
	{ 0x4004, 0x06 }, // BLC line number
	{ 0x3002, 0x1c }, // reset JFIFO, SFIFO, JPG
	{ 0x3006, 0xc3 }, // disable clock of JPEG2x, JPEG
	{ 0x4713, 0x02 }, // JPEG mode 3
	{ 0x4407, 0x0c }, // Quantization sacle
	{ 0x460b, 0x37 },
	{ 0x460c, 0x20 },
	{ 0x4837, 0x2c }, // MIPI global timing
	{ 0x3824, 0x01 }, // PCLK manual divider
	{ 0x5001, 0xa3 }, // SDE on, CMX on, AWB on
	{ 0x3503, 0x00 },

	{ REG_END, 0x00 },
};

static struct regval fmt_yuv422_2048x1536[] = {
	// YUV 2048x1536, 7.5fps
	// input clock 24Mhz, PCLK 84Mhz
	{ 0x3035, 0x21 }, // PLL
	{ 0x3036, 0x69 }, // PLL
	{ 0x3c07, 0x07 }, // lightm eter 1 threshold[7:0]
	{ 0x3820, 0x40 }, // flip
	{ 0x3821, 0x06 }, // mirror
	{ 0x3814, 0x11 }, // timing X inc
	{ 0x3815, 0x11 }, // timing Y inc
	{ 0x3800, 0x00 }, // HS
	{ 0x3801, 0x00 }, // HS
	{ 0x3802, 0x00 }, // VS
	{ 0x3803, 0x00 }, // VS
	{ 0x3804, 0x0a }, // HW (HE)
	{ 0x3805, 0x3f }, // HW (HE)
	{ 0x3806, 0x07 }, // VH (VE)
	{ 0x3807, 0x9f }, // VH (VE)
	{ 0x3808, 0x08 }, // DVPHO
	{ 0x3809, 0x00 }, // DVPHO
	{ 0x380a, 0x06 }, // DVPVO
	{ 0x380b, 0x00 }, // DVPVO
	{ 0x380c, 0x0b }, // HTS
	{ 0x380d, 0x1c }, // HTS
	{ 0x380e, 0x07 }, // VTS
	{ 0x380f, 0xb0 }, // VTS
	{ 0x3813, 0x04 }, // timing V offset
	{ 0x3618, 0x04 },
	{ 0x3612, 0x2b },
	{ 0x3709, 0x12 },
	{ 0x370c, 0x00 },
	// banding filters are calculated automatically in camera driver
	//{ 0x3a02, 0x07 }, // 60Hz max exposure
	//{ 0x3a03, 0xae }, // 60Hz max exposure
	//{ 0x3a08, 0x01 }, // B50 step
	//{ 0x3a09, 0x27 }, // B50 step
	//{ 0x3a0a, 0x00 }, // B60 step
	//{ 0x3a0b, 0xf6 }, // B60 step
	//{ 0x3a0e, 0x06 }, // 50Hz max band
	//{ 0x3a0d, 0x08 }, // 60Hz max band
	//{ 0x3a14, 0x07 }, // 50Hz max exposure
	//{ 0x3a15, 0xae }, // 50Hz max exposure
	{ 0x4004, 0x06 }, // BLC line number
	{ 0x3002, 0x1c }, // reset JFIFO, SFIFO, JPG
	{ 0x3006, 0xc3 }, // disable clock of JPEG2x, JPEG
	{ 0x4713, 0x02 }, // JPEG mode 3
	{ 0x4407, 0x0c }, // Quantization sacle
	{ 0x460b, 0x37 },
	{ 0x460c, 0x20 },
	{ 0x4837, 0x2c }, // MIPI global timing
	{ 0x3824, 0x01 }, // PCLK manual divider
	{ 0x5001, 0xa3 }, // SDE on, CMX on, AWB on
	{ 0x3503, 0x00 },

	{ REG_END, 0x00 },
};

static struct regval fmt_yuv422_2592x1944[] = {
	// YUV 2592x1944, 7.5fps
	// input clock 24Mhz, PCLK 84Mhz
	{ 0x3035, 0x21 }, // PLL
	{ 0x3036, 0x46 }, // 5fps
//	{ 0x3036, 0x69 }, // 7.5fps
	{ 0x3c07, 0x07 }, // lightm eter 1 threshold[7:0]
	{ 0x3820, 0x40 }, // flip
	{ 0x3821, 0x06 }, // mirror
	{ 0x3814, 0x11 }, // timing X inc
	{ 0x3815, 0x11 }, // timing Y inc
	{ 0x3800, 0x00 }, // HS
	{ 0x3801, 0x00 }, // HS
	{ 0x3802, 0x00 }, // VS
	{ 0x3803, 0x00 }, // VS
	{ 0x3804, 0x0a }, // HW (HE)
	{ 0x3805, 0x3f }, // HW (HE)
	{ 0x3806, 0x07 }, // VH (VE)
	{ 0x3807, 0x9f }, // VH (VE)
	{ 0x3808, 0x0a }, // DVPHO
	{ 0x3809, 0x20 }, // DVPHO
	{ 0x380a, 0x07 }, // DVPVO
	{ 0x380b, 0x98 }, // DVPVO
	{ 0x380c, 0x0b }, // HTS
	{ 0x380d, 0x1c }, // HTS
	{ 0x380e, 0x07 }, // VTS
	{ 0x380f, 0xb0 }, // VTS
	{ 0x3813, 0x04 }, // timing V offset
	{ 0x3618, 0x04 },
	{ 0x3612, 0x2b },
	{ 0x3709, 0x12 },
	{ 0x370c, 0x00 },
	// banding filters are calculated automatically in camera driver
	//{ 0x3a02, 0x07 }, // 60Hz max exposure
	//{ 0x3a03, 0xae }, // 60Hz max exposure
	//{ 0x3a08, 0x01 }, // B50 step
	//{ 0x3a09, 0x27 }, // B50 step
	//{ 0x3a0a, 0x00 }, // B60 step
	//{ 0x3a0b, 0xf6 }, // B60 step
	//{ 0x3a0e, 0x06 }, // 50Hz max band
	//{ 0x3a0d, 0x08 }, // 60Hz max band
	//{ 0x3a14, 0x07 }, // 50Hz max exposure
	//{ 0x3a15, 0xae }, // 50Hz max exposure
	{ 0x4004, 0x06 }, // BLC line number
	{ 0x3002, 0x1c }, // reset JFIFO, SFIFO, JPG
	{ 0x3006, 0xc3 }, // disable clock of JPEG2x, JPEG
	{ 0x4713, 0x02 }, // JPEG mode 3
	{ 0x4407, 0x0c }, // Quantization sacle
	{ 0x460b, 0x37 },
	{ 0x460c, 0x20 },
	{ 0x4837, 0x2c }, // MIPI global timing
	{ 0x3824, 0x01 }, // PCLK manual divider
	{ 0x5001, 0xa3 }, // SDE on, CMX on, AWB on
	{ 0x3503, 0x00 },

	{ REG_END, 0x00 },
};

static struct regval brightness_regs_0[] = {
 //Brightness -4
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5587, 0x40 },
	{ 0x5588, 0x09 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};
static struct regval brightness_regs_1[] = {
 //Brightness -3
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5587, 0x30 },
	{ 0x5588, 0x09 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};
static struct regval brightness_regs_2[] = {
 //Brightness -2
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5587, 0x20 },
	{ 0x5588, 0x09 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};
static struct regval brightness_regs_3[] = {
 //Brightness -1
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5587, 0x10 },
	{ 0x5588, 0x09 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};
static struct regval brightness_regs_4[] = {
 //Default Brightness
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5587, 0x00 },
	{ 0x5588, 0x01 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};
static struct regval brightness_regs_5[] = {
 //Brightness +1
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5587, 0x10 },
	{ 0x5588, 0x01 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
};
static struct regval brightness_regs_6[] = {
 //Brightness +6
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5587, 0x20 },
	{ 0x5588, 0x01 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};
static struct regval brightness_regs_7[] = {
 //Brightness +3
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5587, 0x30 },
	{ 0x5588, 0x01 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};
static struct regval brightness_regs_8[] = {
 //Brightness +4
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5587, 0x40 },
	{ 0x5588, 0x01 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval *brightness_regs[9] = {
	brightness_regs_0,
	brightness_regs_1,
	brightness_regs_2,
	brightness_regs_3,
	brightness_regs_4,
	brightness_regs_5,
	brightness_regs_6,
	brightness_regs_7,
	brightness_regs_8,
};

static struct regval effect_regs_norm[] = {
	//Normal (off)
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5580, 0x06 },
	{ 0x5583, 0x40 }, // sat U
	{ 0x5584, 0x10 }, // sat V
	{ 0x5003, 0x08 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval effect_regs_blue[] = {
	//Blueish (cool light)
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5580, 0x1e },
	{ 0x5583, 0xa0 },
	{ 0x5584, 0x40 },
	{ 0x5003, 0x08 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval effect_regs_red[] = {
	//Redish (warm)
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5580, 0x1e },
	{ 0x5583, 0x80 },
	{ 0x5584, 0xc0 },
	{ 0x5003, 0x08 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval effect_regs_blwh[] = {
	//Black and white
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5580, 0x1e },
	{ 0x5583, 0x80 },
	{ 0x5584, 0x80 },
	{ 0x5003, 0x08 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval effect_regs_sepia[] = {
	//Sepia
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5580, 0x1e },
	{ 0x5583, 0x40 },
	{ 0x5584, 0xa0 },
	{ 0x5003, 0x08 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval effect_regs_neg[] = {
	//Negative
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5580, 0x40 },
	{ 0x5003, 0x08 },
	{ 0x5583, 0x40 }, // sat U
	{ 0x5584, 0x10 }, // sat V
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval effect_regs_green[] = {
	//Greenish
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5580, 0x1e },
	{ 0x5583, 0x60 },
	{ 0x5584, 0x60 },
	{ 0x5003, 0x08 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval effect_regs_ovex[] = {
	//Overexposure
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5580, 0x1e },
	{ 0x5583, 0xf0 },
	{ 0x5584, 0xf0 },
	{ 0x5003, 0x08 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval effect_regs_sola[] = {
	//Solarize
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5580, 0x06 },
	{ 0x5583, 0x40 }, // sat U
	{ 0x5584, 0x10 }, // sat V
	{ 0x5003, 0x09 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval *effect_regs[] = {
	effect_regs_norm,
	effect_regs_blue,
	effect_regs_red,
	effect_regs_green,
	effect_regs_blwh,
	effect_regs_sepia,
	effect_regs_neg,
	effect_regs_ovex,
	effect_regs_sola,
};

static char * effect_desc[] = {
	"Normal",
	"Blueish",
	"Redish",
	"Greenish",
	"Black and white",
	"Sepia",
	"Negative",
	"Over exposure",
	"Solarize",
};

static struct regval contrast_regs_p3 [] = {   //Contrast +3
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5586, 0x2c },
	{ 0x5585, 0x1c },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval contrast_regs_p2 [] = {   //Contrast +2
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5586, 0x28 },
	{ 0x5585, 0x18 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval contrast_regs_p1 [] = {   //Contrast +1
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5586, 0x24 },
	{ 0x5585, 0x10 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval contrast_regs_st [] = {   //Contrast Standard
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5586, 0x20 },
	{ 0x5585, 0x00 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval contrast_regs_n1 [] = {   //Contrast -1
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5586, 0x1c },
	{ 0x5585, 0x1c },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval contrast_regs_n2 [] = {   //Contrast -2
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5586, 0x18 },
	{ 0x5585, 0x18 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval contrast_regs_n3 [] = {   //Contrast -3
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5586, 0x14 },
	{ 0x5585, 0x14 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval *contrast_regs[] = {
	contrast_regs_n3,
	contrast_regs_n2,
	contrast_regs_n1,
	contrast_regs_st,
	contrast_regs_p1,
	contrast_regs_p2,
	contrast_regs_p3,
};

static struct regval light_mode_auto [] = {  //Auto
	{ 0x3212, 0x03 }, // start group 3
	{ 0x3406, 0x00 },
	{ 0x3400, 0x04 },
	{ 0x3401, 0x00 },
	{ 0x3402, 0x04 },
	{ 0x3403, 0x00 },
	{ 0x3404, 0x04 },
	{ 0x3405, 0x00 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // lanuch group 3
	{ REG_END, 0x00 },
};

static struct regval light_mode_sunny [] = {  //Sunny
	{ 0x3212, 0x03 }, // start group 3
	{ 0x3406, 0x01 },
	{ 0x3400, 0x06 },
	{ 0x3401, 0x1c },
	{ 0x3402, 0x04 },
	{ 0x3403, 0x00 },
	{ 0x3404, 0x04 },
	{ 0x3405, 0xf3 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // lanuch group 3
	{ REG_END, 0x00 },
};

static struct regval light_mode_office [] = {  //Office
	{ 0x3212, 0x03 }, // start group 3
	{ 0x3406, 0x01 },
	{ 0x3400, 0x05 },
	{ 0x3401, 0x48 },
	{ 0x3402, 0x04 },
	{ 0x3403, 0x00 },
	{ 0x3404, 0x07 },
	{ 0x3405, 0xcf },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // lanuch group 3
	{ REG_END, 0x00 },
};

static struct regval light_mode_cloudy [] = {  //Cloudy
	{ 0x3212, 0x03 }, // start group 3
	{ 0x3406, 0x01 },
	{ 0x3400, 0x06 },
	{ 0x3401, 0x48 },
	{ 0x3402, 0x04 },
	{ 0x3403, 0x00 },
	{ 0x3404, 0x04 },
	{ 0x3405, 0xd3 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // lanuch group 3
	{ REG_END, 0x00 },
};

static struct regval light_mode_home [] = {  //Home
	{ 0x3212, 0x03 }, // start group 3
	{ 0x3406, 0x01 },
	{ 0x3400, 0x04 },
	{ 0x3401, 0x10 },
	{ 0x3402, 0x04 },
	{ 0x3403, 0x00 },
	{ 0x3404, 0x08 },
	{ 0x3405, 0x40 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // lanuch group 3
	{ REG_END, 0x00 },
};

static struct regval *light_mode_regs[] = {
	light_mode_auto,
	light_mode_sunny,
	light_mode_office,
	light_mode_cloudy,
	light_mode_home,
};

static struct regval ev_p3 [] = {  //EV +3
	{ 0x3a0f, 0x60 },
	{ 0x3a10, 0x58 },
	{ 0x3a11, 0xa0 },
	{ 0x3a1b, 0x60 },
	{ 0x3a1e, 0x58 },
	{ 0x3a1f, 0x20 },
	{ REG_END, 0x00 },
};

static struct regval ev_p2 [] = {  //EV +2
	{ 0x3a0f, 0x50 },
	{ 0x3a10, 0x48 },
	{ 0x3a11, 0x90 },
	{ 0x3a1b, 0x50 },
	{ 0x3a1e, 0x48 },
	{ 0x3a1f, 0x20 },
	{ REG_END, 0x00 },
};

static struct regval ev_p1 [] = {  //EV +1
	{ 0x3a0f, 0x40 },
	{ 0x3a10, 0x38 },
	{ 0x3a11, 0x71 },
	{ 0x3a1b, 0x40 },
	{ 0x3a1e, 0x38 },
	{ 0x3a1f, 0x10 },
	{ REG_END, 0x00 },
};

static struct regval ev_st [] = {  //EV Standard
	{ 0x3a0f, 0x38 },
	{ 0x3a10, 0x30 },
	{ 0x3a11, 0x61 },
	{ 0x3a1b, 0x38 },
	{ 0x3a1e, 0x30 },
	{ 0x3a1f, 0x10 },
	{ REG_END, 0x00 },
};

static struct regval ev_n1 [] = {  //EV -1
	{ 0x3a0f, 0x30 },
	{ 0x3a10, 0x28 },
	{ 0x3a11, 0x61 },
	{ 0x3a1b, 0x30 },
	{ 0x3a1e, 0x28 },
	{ 0x3a1f, 0x10 },
	{ REG_END, 0x00 },
};

static struct regval ev_n2 [] = {  //EV -2
	{ 0x3a0f, 0x20 },
	{ 0x3a10, 0x18 },
	{ 0x3a11, 0x41 },
	{ 0x3a1b, 0x20 },
	{ 0x3a1e, 0x18 },
	{ 0x3a1f, 0x10 },
	{ REG_END, 0x00 },
};

static struct regval ev_n3 [] = {  //EV -3
	{ 0x3a0f, 0x10 },
	{ 0x3a10, 0x08 },
	{ 0x3a1b, 0x10 },
	{ 0x3a1e, 0x08 },
	{ 0x3a11, 0x20 },
	{ 0x3a1f, 0x10 },
	{ REG_END, 0x00 },
};

static struct regval * ev_regs [] = {
	ev_n3,
	ev_n2,
	ev_n1,
	ev_st,
	ev_p1,
	ev_p2,
	ev_p3,
};

static struct regval saturation_p3 [] = {  //Saturation  +3
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5381, 0x1c },
	{ 0x5382, 0x5a },
	{ 0x5383, 0x06 },
	{ 0x5384, 0x2b },
	{ 0x5385, 0xab },
	{ 0x5386, 0xd6 },
	{ 0x5387, 0xda },
	{ 0x5388, 0xd6 },
	{ 0x5389, 0x04 },
	{ 0x538b, 0x98 },
	{ 0x538a, 0x01 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval saturation_p2 [] = {  //Saturation  +2
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5381, 0x1c },
	{ 0x5382, 0x5a },
	{ 0x5383, 0x06 },
	{ 0x5384, 0x24 },
	{ 0x5385, 0x8f },
	{ 0x5386, 0xb3 },
	{ 0x5387, 0xb6 },
	{ 0x5388, 0xb3 },
	{ 0x5389, 0x03 },
	{ 0x538b, 0x98 },
	{ 0x538a, 0x01 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval saturation_p1 [] = {  //Saturation  +1
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5381, 0x1c },
	{ 0x5382, 0x5a },
	{ 0x5383, 0x06 },
	{ 0x5384, 0x1f },
	{ 0x5385, 0x7a },
	{ 0x5386, 0x9a },
	{ 0x5387, 0x9c },
	{ 0x5388, 0x9a },
	{ 0x5389, 0x02 },
	{ 0x538b, 0x98 },
	{ 0x538a, 0x01 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval saturation_st [] = {  //Saturation Standard
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5381, 0x1c },
	{ 0x5382, 0x5a },
	{ 0x5383, 0x06 },
	{ 0x5384, 0x1a },
	{ 0x5385, 0x66 },
	{ 0x5386, 0x80 },
	{ 0x5387, 0x82 },
	{ 0x5388, 0x80 },
	{ 0x5389, 0x02 },
	{ 0x538b, 0x98 },
	{ 0x538a, 0x01 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval saturation_n1 [] = {  //Saturation  -1
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5381, 0x1c },
	{ 0x5382, 0x5a },
	{ 0x5383, 0x06 },
	{ 0x5384, 0x15 },
	{ 0x5385, 0x52 },
	{ 0x5386, 0x66 },
	{ 0x5387, 0x68 },
	{ 0x5388, 0x66 },
	{ 0x5389, 0x02 },
	{ 0x538b, 0x98 },
	{ 0x538a, 0x01 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval saturation_n2 [] = {  //Saturation  -2
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5381, 0x1c },
	{ 0x5382, 0x5a },
	{ 0x5383, 0x06 },
	{ 0x5384, 0x10 },
	{ 0x5385, 0x3d },
	{ 0x5386, 0x4d },
	{ 0x5387, 0x4e },
	{ 0x5388, 0x4d },
	{ 0x5389, 0x01 },
	{ 0x538b, 0x98 },
	{ 0x538a, 0x01 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval saturation_n3 [] = {  //Saturation  -3
	{ 0x3212, 0x03 }, // start group 3
	{ 0x5381, 0x1c },
	{ 0x5382, 0x5a },
	{ 0x5383, 0x06 },
	{ 0x5384, 0x0c },
	{ 0x5385, 0x30 },
	{ 0x5386, 0x3d },
	{ 0x5387, 0x3e },
	{ 0x5388, 0x3d },
	{ 0x5389, 0x01 },
	{ 0x538b, 0x98 },
	{ 0x538a, 0x01 },
	{ 0x3212, 0x13 }, // end group 3
	{ 0x3212, 0xa3 }, // launch group 3
	{ REG_END, 0x00 },
};

static struct regval *saturation_regs [] = {
	saturation_n3,
	saturation_n2,
	saturation_n1,
	saturation_st,
	saturation_p1,
	saturation_p2,
	saturation_p3,
};

#endif

